# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ccsds_swig', [dirname(__file__)])
        except ImportError:
            import _ccsds_swig
            return _ccsds_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_ccsds_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ccsds_swig = swig_import_helper()
    del swig_import_helper
else:
    import _ccsds_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _ccsds_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _ccsds_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _ccsds_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _ccsds_swig.high_res_timer_epoch()

_ccsds_swig.NONE_swigconstant(_ccsds_swig)
NONE = _ccsds_swig.NONE

_ccsds_swig.ECSS_23_swigconstant(_ccsds_swig)
ECSS_23 = _ccsds_swig.ECSS_23

_ccsds_swig.ECSS_34_swigconstant(_ccsds_swig)
ECSS_34 = _ccsds_swig.ECSS_34

_ccsds_swig.ECSS_56_swigconstant(_ccsds_swig)
ECSS_56 = _ccsds_swig.ECSS_56

_ccsds_swig.ECSS_78_swigconstant(_ccsds_swig)
ECSS_78 = _ccsds_swig.ECSS_78

def get_pattern_len(punct):
    """get_pattern_len(gr::ccsds::conv_puncturing27::punct_t const punct) -> unsigned int"""
    return _ccsds_swig.get_pattern_len(punct)

def get_pattern(punct):
    """get_pattern(gr::ccsds::conv_puncturing27::punct_t const punct) -> boost::shared_ptr< bool [] >"""
    return _ccsds_swig.get_pattern(punct)

_ccsds_swig.LDPC_PUNCT_NONE_swigconstant(_ccsds_swig)
LDPC_PUNCT_NONE = _ccsds_swig.LDPC_PUNCT_NONE

_ccsds_swig.LDPC_PUNCT_FRONT_swigconstant(_ccsds_swig)
LDPC_PUNCT_FRONT = _ccsds_swig.LDPC_PUNCT_FRONT

_ccsds_swig.LDPC_PUNCT_BACK_swigconstant(_ccsds_swig)
LDPC_PUNCT_BACK = _ccsds_swig.LDPC_PUNCT_BACK

_ccsds_swig.LDPC_PUNCT_CUSTOM_swigconstant(_ccsds_swig)
LDPC_PUNCT_CUSTOM = _ccsds_swig.LDPC_PUNCT_CUSTOM

_ccsds_swig.LDPC_SYS_NONE_swigconstant(_ccsds_swig)
LDPC_SYS_NONE = _ccsds_swig.LDPC_SYS_NONE

_ccsds_swig.LDPC_SYS_FRONT_swigconstant(_ccsds_swig)
LDPC_SYS_FRONT = _ccsds_swig.LDPC_SYS_FRONT

_ccsds_swig.LDPC_SYS_BACK_swigconstant(_ccsds_swig)
LDPC_SYS_BACK = _ccsds_swig.LDPC_SYS_BACK
class randomiser(object):
    """Proxy of C++ gr::ccsds::randomiser class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(polynomial, seed):
        """make(uint8_t const polynomial, uint8_t const seed) -> randomiser_sptr"""
        return _ccsds_swig.randomiser_make(polynomial, seed)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_randomiser
    __del__ = lambda self: None
randomiser_swigregister = _ccsds_swig.randomiser_swigregister
randomiser_swigregister(randomiser)

def randomiser_make(polynomial, seed):
    """randomiser_make(uint8_t const polynomial, uint8_t const seed) -> randomiser_sptr"""
    return _ccsds_swig.randomiser_make(polynomial, seed)

class randomiser_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::randomiser)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::randomiser)> self) -> randomiser_sptr
        __init__(boost::shared_ptr<(gr::ccsds::randomiser)> self, randomiser p) -> randomiser_sptr
        """
        this = _ccsds_swig.new_randomiser_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(randomiser_sptr self) -> randomiser"""
        return _ccsds_swig.randomiser_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_randomiser_sptr
    __del__ = lambda self: None

    def make(self, polynomial, seed):
        """make(randomiser_sptr self, uint8_t const polynomial, uint8_t const seed) -> randomiser_sptr"""
        return _ccsds_swig.randomiser_sptr_make(self, polynomial, seed)


    def history(self):
        """history(randomiser_sptr self) -> unsigned int"""
        return _ccsds_swig.randomiser_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(randomiser_sptr self, int which, int delay)
        declare_sample_delay(randomiser_sptr self, unsigned int delay)
        """
        return _ccsds_swig.randomiser_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(randomiser_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.randomiser_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(randomiser_sptr self) -> double"""
        return _ccsds_swig.randomiser_sptr_relative_rate(self)


    def start(self):
        """start(randomiser_sptr self) -> bool"""
        return _ccsds_swig.randomiser_sptr_start(self)


    def stop(self):
        """stop(randomiser_sptr self) -> bool"""
        return _ccsds_swig.randomiser_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(randomiser_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.randomiser_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(randomiser_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.randomiser_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(randomiser_sptr self, int m)"""
        return _ccsds_swig.randomiser_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(randomiser_sptr self)"""
        return _ccsds_swig.randomiser_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(randomiser_sptr self) -> bool"""
        return _ccsds_swig.randomiser_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(randomiser_sptr self, int m)"""
        return _ccsds_swig.randomiser_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(randomiser_sptr self, int i) -> long"""
        return _ccsds_swig.randomiser_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(randomiser_sptr self, long max_output_buffer)
        set_max_output_buffer(randomiser_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.randomiser_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(randomiser_sptr self, int i) -> long"""
        return _ccsds_swig.randomiser_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(randomiser_sptr self, long min_output_buffer)
        set_min_output_buffer(randomiser_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.randomiser_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(randomiser_sptr self, int which) -> float
        pc_input_buffers_full(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(randomiser_sptr self, int which) -> float
        pc_input_buffers_full_avg(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(randomiser_sptr self, int which) -> float
        pc_input_buffers_full_var(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(randomiser_sptr self, int which) -> float
        pc_output_buffers_full(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(randomiser_sptr self, int which) -> float
        pc_output_buffers_full_avg(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(randomiser_sptr self, int which) -> float
        pc_output_buffers_full_var(randomiser_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(randomiser_sptr self) -> float"""
        return _ccsds_swig.randomiser_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(randomiser_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.randomiser_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(randomiser_sptr self)"""
        return _ccsds_swig.randomiser_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(randomiser_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.randomiser_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(randomiser_sptr self) -> int"""
        return _ccsds_swig.randomiser_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(randomiser_sptr self, int priority) -> int"""
        return _ccsds_swig.randomiser_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(randomiser_sptr self) -> std::string"""
        return _ccsds_swig.randomiser_sptr_name(self)


    def symbol_name(self):
        """symbol_name(randomiser_sptr self) -> std::string"""
        return _ccsds_swig.randomiser_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(randomiser_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.randomiser_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(randomiser_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.randomiser_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(randomiser_sptr self) -> long"""
        return _ccsds_swig.randomiser_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(randomiser_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.randomiser_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(randomiser_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.randomiser_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(randomiser_sptr self) -> std::string"""
        return _ccsds_swig.randomiser_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(randomiser_sptr self, std::string name)"""
        return _ccsds_swig.randomiser_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(randomiser_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.randomiser_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(randomiser_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.randomiser_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(randomiser_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.randomiser_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(randomiser_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.randomiser_sptr_message_subscribers(self, which_port)

randomiser_sptr_swigregister = _ccsds_swig.randomiser_sptr_swigregister
randomiser_sptr_swigregister(randomiser_sptr)


randomiser_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
randomiser = randomiser.make;

class randomiser_softbits(object):
    """Proxy of C++ gr::ccsds::randomiser_softbits class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(polynomial, seed):
        """make(uint8_t const polynomial, uint8_t const seed) -> randomiser_softbits_sptr"""
        return _ccsds_swig.randomiser_softbits_make(polynomial, seed)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_randomiser_softbits
    __del__ = lambda self: None
randomiser_softbits_swigregister = _ccsds_swig.randomiser_softbits_swigregister
randomiser_softbits_swigregister(randomiser_softbits)

def randomiser_softbits_make(polynomial, seed):
    """randomiser_softbits_make(uint8_t const polynomial, uint8_t const seed) -> randomiser_softbits_sptr"""
    return _ccsds_swig.randomiser_softbits_make(polynomial, seed)

class randomiser_softbits_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::randomiser_softbits)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::randomiser_softbits)> self) -> randomiser_softbits_sptr
        __init__(boost::shared_ptr<(gr::ccsds::randomiser_softbits)> self, randomiser_softbits p) -> randomiser_softbits_sptr
        """
        this = _ccsds_swig.new_randomiser_softbits_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(randomiser_softbits_sptr self) -> randomiser_softbits"""
        return _ccsds_swig.randomiser_softbits_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_randomiser_softbits_sptr
    __del__ = lambda self: None

    def make(self, polynomial, seed):
        """make(randomiser_softbits_sptr self, uint8_t const polynomial, uint8_t const seed) -> randomiser_softbits_sptr"""
        return _ccsds_swig.randomiser_softbits_sptr_make(self, polynomial, seed)


    def history(self):
        """history(randomiser_softbits_sptr self) -> unsigned int"""
        return _ccsds_swig.randomiser_softbits_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(randomiser_softbits_sptr self, int which, int delay)
        declare_sample_delay(randomiser_softbits_sptr self, unsigned int delay)
        """
        return _ccsds_swig.randomiser_softbits_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(randomiser_softbits_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.randomiser_softbits_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(randomiser_softbits_sptr self) -> int"""
        return _ccsds_swig.randomiser_softbits_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(randomiser_softbits_sptr self) -> double"""
        return _ccsds_swig.randomiser_softbits_sptr_relative_rate(self)


    def start(self):
        """start(randomiser_softbits_sptr self) -> bool"""
        return _ccsds_swig.randomiser_softbits_sptr_start(self)


    def stop(self):
        """stop(randomiser_softbits_sptr self) -> bool"""
        return _ccsds_swig.randomiser_softbits_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(randomiser_softbits_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.randomiser_softbits_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(randomiser_softbits_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.randomiser_softbits_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(randomiser_softbits_sptr self) -> int"""
        return _ccsds_swig.randomiser_softbits_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(randomiser_softbits_sptr self, int m)"""
        return _ccsds_swig.randomiser_softbits_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(randomiser_softbits_sptr self)"""
        return _ccsds_swig.randomiser_softbits_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(randomiser_softbits_sptr self) -> bool"""
        return _ccsds_swig.randomiser_softbits_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(randomiser_softbits_sptr self, int m)"""
        return _ccsds_swig.randomiser_softbits_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(randomiser_softbits_sptr self) -> int"""
        return _ccsds_swig.randomiser_softbits_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(randomiser_softbits_sptr self, int i) -> long"""
        return _ccsds_swig.randomiser_softbits_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(randomiser_softbits_sptr self, long max_output_buffer)
        set_max_output_buffer(randomiser_softbits_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.randomiser_softbits_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(randomiser_softbits_sptr self, int i) -> long"""
        return _ccsds_swig.randomiser_softbits_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(randomiser_softbits_sptr self, long min_output_buffer)
        set_min_output_buffer(randomiser_softbits_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.randomiser_softbits_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(randomiser_softbits_sptr self, int which) -> float
        pc_input_buffers_full(randomiser_softbits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_softbits_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(randomiser_softbits_sptr self, int which) -> float
        pc_input_buffers_full_avg(randomiser_softbits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_softbits_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(randomiser_softbits_sptr self, int which) -> float
        pc_input_buffers_full_var(randomiser_softbits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_softbits_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(randomiser_softbits_sptr self, int which) -> float
        pc_output_buffers_full(randomiser_softbits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_softbits_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(randomiser_softbits_sptr self, int which) -> float
        pc_output_buffers_full_avg(randomiser_softbits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_softbits_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(randomiser_softbits_sptr self, int which) -> float
        pc_output_buffers_full_var(randomiser_softbits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.randomiser_softbits_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(randomiser_softbits_sptr self) -> float"""
        return _ccsds_swig.randomiser_softbits_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(randomiser_softbits_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.randomiser_softbits_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(randomiser_softbits_sptr self)"""
        return _ccsds_swig.randomiser_softbits_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(randomiser_softbits_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.randomiser_softbits_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(randomiser_softbits_sptr self) -> int"""
        return _ccsds_swig.randomiser_softbits_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(randomiser_softbits_sptr self) -> int"""
        return _ccsds_swig.randomiser_softbits_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(randomiser_softbits_sptr self, int priority) -> int"""
        return _ccsds_swig.randomiser_softbits_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(randomiser_softbits_sptr self) -> std::string"""
        return _ccsds_swig.randomiser_softbits_sptr_name(self)


    def symbol_name(self):
        """symbol_name(randomiser_softbits_sptr self) -> std::string"""
        return _ccsds_swig.randomiser_softbits_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(randomiser_softbits_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.randomiser_softbits_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(randomiser_softbits_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.randomiser_softbits_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(randomiser_softbits_sptr self) -> long"""
        return _ccsds_swig.randomiser_softbits_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(randomiser_softbits_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.randomiser_softbits_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(randomiser_softbits_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.randomiser_softbits_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(randomiser_softbits_sptr self) -> std::string"""
        return _ccsds_swig.randomiser_softbits_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(randomiser_softbits_sptr self, std::string name)"""
        return _ccsds_swig.randomiser_softbits_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(randomiser_softbits_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.randomiser_softbits_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(randomiser_softbits_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.randomiser_softbits_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(randomiser_softbits_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.randomiser_softbits_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(randomiser_softbits_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.randomiser_softbits_sptr_message_subscribers(self, which_port)

randomiser_softbits_sptr_swigregister = _ccsds_swig.randomiser_softbits_sptr_swigregister
randomiser_softbits_sptr_swigregister(randomiser_softbits_sptr)


randomiser_softbits_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
randomiser_softbits = randomiser_softbits.make;

class reversebits(object):
    """Proxy of C++ gr::ccsds::reversebits class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(msg_length, reverse_indices):
        """make(unsigned int const msg_length, std::vector< unsigned int,std::allocator< unsigned int > > const & reverse_indices) -> reversebits_sptr"""
        return _ccsds_swig.reversebits_make(msg_length, reverse_indices)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_reversebits
    __del__ = lambda self: None
reversebits_swigregister = _ccsds_swig.reversebits_swigregister
reversebits_swigregister(reversebits)

def reversebits_make(msg_length, reverse_indices):
    """reversebits_make(unsigned int const msg_length, std::vector< unsigned int,std::allocator< unsigned int > > const & reverse_indices) -> reversebits_sptr"""
    return _ccsds_swig.reversebits_make(msg_length, reverse_indices)

class reversebits_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::reversebits)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::reversebits)> self) -> reversebits_sptr
        __init__(boost::shared_ptr<(gr::ccsds::reversebits)> self, reversebits p) -> reversebits_sptr
        """
        this = _ccsds_swig.new_reversebits_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(reversebits_sptr self) -> reversebits"""
        return _ccsds_swig.reversebits_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_reversebits_sptr
    __del__ = lambda self: None

    def make(self, msg_length, reverse_indices):
        """make(reversebits_sptr self, unsigned int const msg_length, std::vector< unsigned int,std::allocator< unsigned int > > const & reverse_indices) -> reversebits_sptr"""
        return _ccsds_swig.reversebits_sptr_make(self, msg_length, reverse_indices)


    def history(self):
        """history(reversebits_sptr self) -> unsigned int"""
        return _ccsds_swig.reversebits_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(reversebits_sptr self, int which, int delay)
        declare_sample_delay(reversebits_sptr self, unsigned int delay)
        """
        return _ccsds_swig.reversebits_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(reversebits_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.reversebits_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(reversebits_sptr self) -> double"""
        return _ccsds_swig.reversebits_sptr_relative_rate(self)


    def start(self):
        """start(reversebits_sptr self) -> bool"""
        return _ccsds_swig.reversebits_sptr_start(self)


    def stop(self):
        """stop(reversebits_sptr self) -> bool"""
        return _ccsds_swig.reversebits_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(reversebits_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.reversebits_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(reversebits_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.reversebits_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(reversebits_sptr self, int m)"""
        return _ccsds_swig.reversebits_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(reversebits_sptr self)"""
        return _ccsds_swig.reversebits_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(reversebits_sptr self) -> bool"""
        return _ccsds_swig.reversebits_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(reversebits_sptr self, int m)"""
        return _ccsds_swig.reversebits_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(reversebits_sptr self, int i) -> long"""
        return _ccsds_swig.reversebits_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(reversebits_sptr self, long max_output_buffer)
        set_max_output_buffer(reversebits_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.reversebits_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(reversebits_sptr self, int i) -> long"""
        return _ccsds_swig.reversebits_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(reversebits_sptr self, long min_output_buffer)
        set_min_output_buffer(reversebits_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.reversebits_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(reversebits_sptr self, int which) -> float
        pc_input_buffers_full(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(reversebits_sptr self, int which) -> float
        pc_input_buffers_full_avg(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(reversebits_sptr self, int which) -> float
        pc_input_buffers_full_var(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(reversebits_sptr self, int which) -> float
        pc_output_buffers_full(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(reversebits_sptr self, int which) -> float
        pc_output_buffers_full_avg(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(reversebits_sptr self, int which) -> float
        pc_output_buffers_full_var(reversebits_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.reversebits_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(reversebits_sptr self) -> float"""
        return _ccsds_swig.reversebits_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(reversebits_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.reversebits_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(reversebits_sptr self)"""
        return _ccsds_swig.reversebits_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(reversebits_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.reversebits_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(reversebits_sptr self) -> int"""
        return _ccsds_swig.reversebits_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(reversebits_sptr self, int priority) -> int"""
        return _ccsds_swig.reversebits_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(reversebits_sptr self) -> std::string"""
        return _ccsds_swig.reversebits_sptr_name(self)


    def symbol_name(self):
        """symbol_name(reversebits_sptr self) -> std::string"""
        return _ccsds_swig.reversebits_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(reversebits_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.reversebits_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(reversebits_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.reversebits_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(reversebits_sptr self) -> long"""
        return _ccsds_swig.reversebits_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(reversebits_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.reversebits_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(reversebits_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.reversebits_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(reversebits_sptr self) -> std::string"""
        return _ccsds_swig.reversebits_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(reversebits_sptr self, std::string name)"""
        return _ccsds_swig.reversebits_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(reversebits_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.reversebits_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(reversebits_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.reversebits_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(reversebits_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.reversebits_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(reversebits_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.reversebits_sptr_message_subscribers(self, which_port)

reversebits_sptr_swigregister = _ccsds_swig.reversebits_sptr_swigregister
reversebits_sptr_swigregister(reversebits_sptr)


reversebits_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
reversebits = reversebits.make;

class msg_null_src(object):
    """Proxy of C++ gr::ccsds::msg_null_src class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> msg_null_src_sptr"""
        return _ccsds_swig.msg_null_src_make()

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_msg_null_src
    __del__ = lambda self: None
msg_null_src_swigregister = _ccsds_swig.msg_null_src_swigregister
msg_null_src_swigregister(msg_null_src)

def msg_null_src_make():
    """msg_null_src_make() -> msg_null_src_sptr"""
    return _ccsds_swig.msg_null_src_make()

class msg_null_src_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::msg_null_src)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::msg_null_src)> self) -> msg_null_src_sptr
        __init__(boost::shared_ptr<(gr::ccsds::msg_null_src)> self, msg_null_src p) -> msg_null_src_sptr
        """
        this = _ccsds_swig.new_msg_null_src_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(msg_null_src_sptr self) -> msg_null_src"""
        return _ccsds_swig.msg_null_src_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_msg_null_src_sptr
    __del__ = lambda self: None

    def make(self):
        """make(msg_null_src_sptr self) -> msg_null_src_sptr"""
        return _ccsds_swig.msg_null_src_sptr_make(self)


    def history(self):
        """history(msg_null_src_sptr self) -> unsigned int"""
        return _ccsds_swig.msg_null_src_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(msg_null_src_sptr self, int which, int delay)
        declare_sample_delay(msg_null_src_sptr self, unsigned int delay)
        """
        return _ccsds_swig.msg_null_src_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(msg_null_src_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.msg_null_src_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(msg_null_src_sptr self) -> double"""
        return _ccsds_swig.msg_null_src_sptr_relative_rate(self)


    def start(self):
        """start(msg_null_src_sptr self) -> bool"""
        return _ccsds_swig.msg_null_src_sptr_start(self)


    def stop(self):
        """stop(msg_null_src_sptr self) -> bool"""
        return _ccsds_swig.msg_null_src_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(msg_null_src_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.msg_null_src_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(msg_null_src_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.msg_null_src_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(msg_null_src_sptr self, int m)"""
        return _ccsds_swig.msg_null_src_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(msg_null_src_sptr self)"""
        return _ccsds_swig.msg_null_src_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(msg_null_src_sptr self) -> bool"""
        return _ccsds_swig.msg_null_src_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(msg_null_src_sptr self, int m)"""
        return _ccsds_swig.msg_null_src_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(msg_null_src_sptr self, int i) -> long"""
        return _ccsds_swig.msg_null_src_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(msg_null_src_sptr self, long max_output_buffer)
        set_max_output_buffer(msg_null_src_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.msg_null_src_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(msg_null_src_sptr self, int i) -> long"""
        return _ccsds_swig.msg_null_src_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(msg_null_src_sptr self, long min_output_buffer)
        set_min_output_buffer(msg_null_src_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.msg_null_src_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(msg_null_src_sptr self, int which) -> float
        pc_input_buffers_full(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(msg_null_src_sptr self, int which) -> float
        pc_input_buffers_full_avg(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(msg_null_src_sptr self, int which) -> float
        pc_input_buffers_full_var(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(msg_null_src_sptr self, int which) -> float
        pc_output_buffers_full(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(msg_null_src_sptr self, int which) -> float
        pc_output_buffers_full_avg(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(msg_null_src_sptr self, int which) -> float
        pc_output_buffers_full_var(msg_null_src_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.msg_null_src_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(msg_null_src_sptr self) -> float"""
        return _ccsds_swig.msg_null_src_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(msg_null_src_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.msg_null_src_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(msg_null_src_sptr self)"""
        return _ccsds_swig.msg_null_src_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(msg_null_src_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.msg_null_src_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(msg_null_src_sptr self) -> int"""
        return _ccsds_swig.msg_null_src_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(msg_null_src_sptr self, int priority) -> int"""
        return _ccsds_swig.msg_null_src_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(msg_null_src_sptr self) -> std::string"""
        return _ccsds_swig.msg_null_src_sptr_name(self)


    def symbol_name(self):
        """symbol_name(msg_null_src_sptr self) -> std::string"""
        return _ccsds_swig.msg_null_src_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(msg_null_src_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.msg_null_src_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(msg_null_src_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.msg_null_src_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(msg_null_src_sptr self) -> long"""
        return _ccsds_swig.msg_null_src_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(msg_null_src_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.msg_null_src_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(msg_null_src_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.msg_null_src_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(msg_null_src_sptr self) -> std::string"""
        return _ccsds_swig.msg_null_src_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(msg_null_src_sptr self, std::string name)"""
        return _ccsds_swig.msg_null_src_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(msg_null_src_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.msg_null_src_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(msg_null_src_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.msg_null_src_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(msg_null_src_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.msg_null_src_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(msg_null_src_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.msg_null_src_sptr_message_subscribers(self, which_port)

msg_null_src_sptr_swigregister = _ccsds_swig.msg_null_src_sptr_swigregister
msg_null_src_sptr_swigregister(msg_null_src_sptr)


msg_null_src_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
msg_null_src = msg_null_src.make;

class add_asm(object):
    """Proxy of C++ gr::ccsds::add_asm class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(ASM, frame_len):
        """make(std::string ASM, unsigned int const frame_len) -> add_asm_sptr"""
        return _ccsds_swig.add_asm_make(ASM, frame_len)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_add_asm
    __del__ = lambda self: None
add_asm_swigregister = _ccsds_swig.add_asm_swigregister
add_asm_swigregister(add_asm)

def add_asm_make(ASM, frame_len):
    """add_asm_make(std::string ASM, unsigned int const frame_len) -> add_asm_sptr"""
    return _ccsds_swig.add_asm_make(ASM, frame_len)

class add_asm_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::add_asm)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::add_asm)> self) -> add_asm_sptr
        __init__(boost::shared_ptr<(gr::ccsds::add_asm)> self, add_asm p) -> add_asm_sptr
        """
        this = _ccsds_swig.new_add_asm_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(add_asm_sptr self) -> add_asm"""
        return _ccsds_swig.add_asm_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_add_asm_sptr
    __del__ = lambda self: None

    def make(self, ASM, frame_len):
        """make(add_asm_sptr self, std::string ASM, unsigned int const frame_len) -> add_asm_sptr"""
        return _ccsds_swig.add_asm_sptr_make(self, ASM, frame_len)


    def history(self):
        """history(add_asm_sptr self) -> unsigned int"""
        return _ccsds_swig.add_asm_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_asm_sptr self, int which, int delay)
        declare_sample_delay(add_asm_sptr self, unsigned int delay)
        """
        return _ccsds_swig.add_asm_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(add_asm_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.add_asm_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(add_asm_sptr self) -> double"""
        return _ccsds_swig.add_asm_sptr_relative_rate(self)


    def start(self):
        """start(add_asm_sptr self) -> bool"""
        return _ccsds_swig.add_asm_sptr_start(self)


    def stop(self):
        """stop(add_asm_sptr self) -> bool"""
        return _ccsds_swig.add_asm_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(add_asm_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.add_asm_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(add_asm_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.add_asm_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(add_asm_sptr self, int m)"""
        return _ccsds_swig.add_asm_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_asm_sptr self)"""
        return _ccsds_swig.add_asm_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_asm_sptr self) -> bool"""
        return _ccsds_swig.add_asm_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(add_asm_sptr self, int m)"""
        return _ccsds_swig.add_asm_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(add_asm_sptr self, int i) -> long"""
        return _ccsds_swig.add_asm_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_asm_sptr self, long max_output_buffer)
        set_max_output_buffer(add_asm_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.add_asm_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(add_asm_sptr self, int i) -> long"""
        return _ccsds_swig.add_asm_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_asm_sptr self, long min_output_buffer)
        set_min_output_buffer(add_asm_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.add_asm_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_asm_sptr self, int which) -> float
        pc_input_buffers_full(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_asm_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_asm_sptr self, int which) -> float
        pc_input_buffers_full_var(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_asm_sptr self, int which) -> float
        pc_output_buffers_full(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_asm_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_asm_sptr self, int which) -> float
        pc_output_buffers_full_var(add_asm_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.add_asm_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(add_asm_sptr self) -> float"""
        return _ccsds_swig.add_asm_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(add_asm_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.add_asm_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(add_asm_sptr self)"""
        return _ccsds_swig.add_asm_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(add_asm_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.add_asm_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(add_asm_sptr self) -> int"""
        return _ccsds_swig.add_asm_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(add_asm_sptr self, int priority) -> int"""
        return _ccsds_swig.add_asm_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(add_asm_sptr self) -> std::string"""
        return _ccsds_swig.add_asm_sptr_name(self)


    def symbol_name(self):
        """symbol_name(add_asm_sptr self) -> std::string"""
        return _ccsds_swig.add_asm_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(add_asm_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.add_asm_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(add_asm_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.add_asm_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(add_asm_sptr self) -> long"""
        return _ccsds_swig.add_asm_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(add_asm_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.add_asm_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(add_asm_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.add_asm_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(add_asm_sptr self) -> std::string"""
        return _ccsds_swig.add_asm_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(add_asm_sptr self, std::string name)"""
        return _ccsds_swig.add_asm_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(add_asm_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.add_asm_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(add_asm_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.add_asm_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(add_asm_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.add_asm_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(add_asm_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.add_asm_sptr_message_subscribers(self, which_port)

add_asm_sptr_swigregister = _ccsds_swig.add_asm_sptr_swigregister
add_asm_sptr_swigregister(add_asm_sptr)


add_asm_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_asm = add_asm.make;

class trunk_tail(object):
    """Proxy of C++ gr::ccsds::trunk_tail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(trunc_len, frame_len, blanc_bits):
        """make(unsigned int const trunc_len, unsigned int const frame_len, unsigned int const blanc_bits) -> trunk_tail_sptr"""
        return _ccsds_swig.trunk_tail_make(trunc_len, frame_len, blanc_bits)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_trunk_tail
    __del__ = lambda self: None
trunk_tail_swigregister = _ccsds_swig.trunk_tail_swigregister
trunk_tail_swigregister(trunk_tail)

def trunk_tail_make(trunc_len, frame_len, blanc_bits):
    """trunk_tail_make(unsigned int const trunc_len, unsigned int const frame_len, unsigned int const blanc_bits) -> trunk_tail_sptr"""
    return _ccsds_swig.trunk_tail_make(trunc_len, frame_len, blanc_bits)

class trunk_tail_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::trunk_tail)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::trunk_tail)> self) -> trunk_tail_sptr
        __init__(boost::shared_ptr<(gr::ccsds::trunk_tail)> self, trunk_tail p) -> trunk_tail_sptr
        """
        this = _ccsds_swig.new_trunk_tail_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(trunk_tail_sptr self) -> trunk_tail"""
        return _ccsds_swig.trunk_tail_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_trunk_tail_sptr
    __del__ = lambda self: None

    def make(self, trunc_len, frame_len, blanc_bits):
        """make(trunk_tail_sptr self, unsigned int const trunc_len, unsigned int const frame_len, unsigned int const blanc_bits) -> trunk_tail_sptr"""
        return _ccsds_swig.trunk_tail_sptr_make(self, trunc_len, frame_len, blanc_bits)


    def history(self):
        """history(trunk_tail_sptr self) -> unsigned int"""
        return _ccsds_swig.trunk_tail_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(trunk_tail_sptr self, int which, int delay)
        declare_sample_delay(trunk_tail_sptr self, unsigned int delay)
        """
        return _ccsds_swig.trunk_tail_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(trunk_tail_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.trunk_tail_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(trunk_tail_sptr self) -> double"""
        return _ccsds_swig.trunk_tail_sptr_relative_rate(self)


    def start(self):
        """start(trunk_tail_sptr self) -> bool"""
        return _ccsds_swig.trunk_tail_sptr_start(self)


    def stop(self):
        """stop(trunk_tail_sptr self) -> bool"""
        return _ccsds_swig.trunk_tail_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(trunk_tail_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.trunk_tail_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(trunk_tail_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.trunk_tail_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(trunk_tail_sptr self, int m)"""
        return _ccsds_swig.trunk_tail_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(trunk_tail_sptr self)"""
        return _ccsds_swig.trunk_tail_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(trunk_tail_sptr self) -> bool"""
        return _ccsds_swig.trunk_tail_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(trunk_tail_sptr self, int m)"""
        return _ccsds_swig.trunk_tail_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(trunk_tail_sptr self, int i) -> long"""
        return _ccsds_swig.trunk_tail_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(trunk_tail_sptr self, long max_output_buffer)
        set_max_output_buffer(trunk_tail_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.trunk_tail_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(trunk_tail_sptr self, int i) -> long"""
        return _ccsds_swig.trunk_tail_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(trunk_tail_sptr self, long min_output_buffer)
        set_min_output_buffer(trunk_tail_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.trunk_tail_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(trunk_tail_sptr self, int which) -> float
        pc_input_buffers_full(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(trunk_tail_sptr self, int which) -> float
        pc_input_buffers_full_avg(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(trunk_tail_sptr self, int which) -> float
        pc_input_buffers_full_var(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(trunk_tail_sptr self, int which) -> float
        pc_output_buffers_full(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(trunk_tail_sptr self, int which) -> float
        pc_output_buffers_full_avg(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(trunk_tail_sptr self, int which) -> float
        pc_output_buffers_full_var(trunk_tail_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.trunk_tail_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(trunk_tail_sptr self) -> float"""
        return _ccsds_swig.trunk_tail_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(trunk_tail_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.trunk_tail_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(trunk_tail_sptr self)"""
        return _ccsds_swig.trunk_tail_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(trunk_tail_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.trunk_tail_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(trunk_tail_sptr self) -> int"""
        return _ccsds_swig.trunk_tail_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(trunk_tail_sptr self, int priority) -> int"""
        return _ccsds_swig.trunk_tail_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(trunk_tail_sptr self) -> std::string"""
        return _ccsds_swig.trunk_tail_sptr_name(self)


    def symbol_name(self):
        """symbol_name(trunk_tail_sptr self) -> std::string"""
        return _ccsds_swig.trunk_tail_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(trunk_tail_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.trunk_tail_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(trunk_tail_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.trunk_tail_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(trunk_tail_sptr self) -> long"""
        return _ccsds_swig.trunk_tail_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(trunk_tail_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.trunk_tail_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(trunk_tail_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.trunk_tail_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(trunk_tail_sptr self) -> std::string"""
        return _ccsds_swig.trunk_tail_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(trunk_tail_sptr self, std::string name)"""
        return _ccsds_swig.trunk_tail_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(trunk_tail_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.trunk_tail_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(trunk_tail_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.trunk_tail_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(trunk_tail_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.trunk_tail_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(trunk_tail_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.trunk_tail_sptr_message_subscribers(self, which_port)

trunk_tail_sptr_swigregister = _ccsds_swig.trunk_tail_sptr_swigregister
trunk_tail_sptr_swigregister(trunk_tail_sptr)


trunk_tail_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
trunk_tail = trunk_tail.make;

class pll_cc(object):
    """Proxy of C++ gr::ccsds::pll_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(m, loop_bandwidth):
        """make(unsigned int m, float loop_bandwidth) -> pll_cc_sptr"""
        return _ccsds_swig.pll_cc_make(m, loop_bandwidth)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_pll_cc
    __del__ = lambda self: None
pll_cc_swigregister = _ccsds_swig.pll_cc_swigregister
pll_cc_swigregister(pll_cc)

def pll_cc_make(m, loop_bandwidth):
    """pll_cc_make(unsigned int m, float loop_bandwidth) -> pll_cc_sptr"""
    return _ccsds_swig.pll_cc_make(m, loop_bandwidth)

class pll_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::pll_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::pll_cc)> self) -> pll_cc_sptr
        __init__(boost::shared_ptr<(gr::ccsds::pll_cc)> self, pll_cc p) -> pll_cc_sptr
        """
        this = _ccsds_swig.new_pll_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pll_cc_sptr self) -> pll_cc"""
        return _ccsds_swig.pll_cc_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_pll_cc_sptr
    __del__ = lambda self: None

    def make(self, m, loop_bandwidth):
        """make(pll_cc_sptr self, unsigned int m, float loop_bandwidth) -> pll_cc_sptr"""
        return _ccsds_swig.pll_cc_sptr_make(self, m, loop_bandwidth)


    def history(self):
        """history(pll_cc_sptr self) -> unsigned int"""
        return _ccsds_swig.pll_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pll_cc_sptr self, int which, int delay)
        declare_sample_delay(pll_cc_sptr self, unsigned int delay)
        """
        return _ccsds_swig.pll_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(pll_cc_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.pll_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(pll_cc_sptr self) -> double"""
        return _ccsds_swig.pll_cc_sptr_relative_rate(self)


    def start(self):
        """start(pll_cc_sptr self) -> bool"""
        return _ccsds_swig.pll_cc_sptr_start(self)


    def stop(self):
        """stop(pll_cc_sptr self) -> bool"""
        return _ccsds_swig.pll_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(pll_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.pll_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(pll_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.pll_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(pll_cc_sptr self, int m)"""
        return _ccsds_swig.pll_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pll_cc_sptr self)"""
        return _ccsds_swig.pll_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pll_cc_sptr self) -> bool"""
        return _ccsds_swig.pll_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(pll_cc_sptr self, int m)"""
        return _ccsds_swig.pll_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pll_cc_sptr self, int i) -> long"""
        return _ccsds_swig.pll_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pll_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(pll_cc_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.pll_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pll_cc_sptr self, int i) -> long"""
        return _ccsds_swig.pll_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pll_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(pll_cc_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.pll_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pll_cc_sptr self, int which) -> float
        pc_input_buffers_full(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pll_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pll_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pll_cc_sptr self, int which) -> float
        pc_output_buffers_full(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pll_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pll_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(pll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.pll_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(pll_cc_sptr self) -> float"""
        return _ccsds_swig.pll_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pll_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.pll_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pll_cc_sptr self)"""
        return _ccsds_swig.pll_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pll_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.pll_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(pll_cc_sptr self) -> int"""
        return _ccsds_swig.pll_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(pll_cc_sptr self, int priority) -> int"""
        return _ccsds_swig.pll_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(pll_cc_sptr self) -> std::string"""
        return _ccsds_swig.pll_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pll_cc_sptr self) -> std::string"""
        return _ccsds_swig.pll_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pll_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.pll_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pll_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.pll_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pll_cc_sptr self) -> long"""
        return _ccsds_swig.pll_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pll_cc_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.pll_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pll_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.pll_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pll_cc_sptr self) -> std::string"""
        return _ccsds_swig.pll_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pll_cc_sptr self, std::string name)"""
        return _ccsds_swig.pll_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pll_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.pll_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pll_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.pll_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pll_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.pll_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pll_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.pll_cc_sptr_message_subscribers(self, which_port)

pll_cc_sptr_swigregister = _ccsds_swig.pll_cc_sptr_swigregister
pll_cc_sptr_swigregister(pll_cc_sptr)


pll_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pll_cc = pll_cc.make;

class dll_cc(object):
    """Proxy of C++ gr::ccsds::dll_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(osf, gamma):
        """make(unsigned int osf, float gamma) -> dll_cc_sptr"""
        return _ccsds_swig.dll_cc_make(osf, gamma)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_dll_cc
    __del__ = lambda self: None
dll_cc_swigregister = _ccsds_swig.dll_cc_swigregister
dll_cc_swigregister(dll_cc)

def dll_cc_make(osf, gamma):
    """dll_cc_make(unsigned int osf, float gamma) -> dll_cc_sptr"""
    return _ccsds_swig.dll_cc_make(osf, gamma)

class dll_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::dll_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::dll_cc)> self) -> dll_cc_sptr
        __init__(boost::shared_ptr<(gr::ccsds::dll_cc)> self, dll_cc p) -> dll_cc_sptr
        """
        this = _ccsds_swig.new_dll_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(dll_cc_sptr self) -> dll_cc"""
        return _ccsds_swig.dll_cc_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_dll_cc_sptr
    __del__ = lambda self: None

    def make(self, osf, gamma):
        """make(dll_cc_sptr self, unsigned int osf, float gamma) -> dll_cc_sptr"""
        return _ccsds_swig.dll_cc_sptr_make(self, osf, gamma)


    def history(self):
        """history(dll_cc_sptr self) -> unsigned int"""
        return _ccsds_swig.dll_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dll_cc_sptr self, int which, int delay)
        declare_sample_delay(dll_cc_sptr self, unsigned int delay)
        """
        return _ccsds_swig.dll_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(dll_cc_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.dll_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(dll_cc_sptr self) -> double"""
        return _ccsds_swig.dll_cc_sptr_relative_rate(self)


    def start(self):
        """start(dll_cc_sptr self) -> bool"""
        return _ccsds_swig.dll_cc_sptr_start(self)


    def stop(self):
        """stop(dll_cc_sptr self) -> bool"""
        return _ccsds_swig.dll_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(dll_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.dll_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(dll_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.dll_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(dll_cc_sptr self, int m)"""
        return _ccsds_swig.dll_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dll_cc_sptr self)"""
        return _ccsds_swig.dll_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dll_cc_sptr self) -> bool"""
        return _ccsds_swig.dll_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(dll_cc_sptr self, int m)"""
        return _ccsds_swig.dll_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(dll_cc_sptr self, int i) -> long"""
        return _ccsds_swig.dll_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dll_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(dll_cc_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.dll_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(dll_cc_sptr self, int i) -> long"""
        return _ccsds_swig.dll_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dll_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(dll_cc_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.dll_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dll_cc_sptr self, int which) -> float
        pc_input_buffers_full(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dll_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dll_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dll_cc_sptr self, int which) -> float
        pc_output_buffers_full(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dll_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dll_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(dll_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.dll_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(dll_cc_sptr self) -> float"""
        return _ccsds_swig.dll_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(dll_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.dll_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(dll_cc_sptr self)"""
        return _ccsds_swig.dll_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(dll_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.dll_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(dll_cc_sptr self) -> int"""
        return _ccsds_swig.dll_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(dll_cc_sptr self, int priority) -> int"""
        return _ccsds_swig.dll_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(dll_cc_sptr self) -> std::string"""
        return _ccsds_swig.dll_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(dll_cc_sptr self) -> std::string"""
        return _ccsds_swig.dll_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(dll_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.dll_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(dll_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.dll_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(dll_cc_sptr self) -> long"""
        return _ccsds_swig.dll_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(dll_cc_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.dll_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(dll_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.dll_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(dll_cc_sptr self) -> std::string"""
        return _ccsds_swig.dll_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(dll_cc_sptr self, std::string name)"""
        return _ccsds_swig.dll_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(dll_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.dll_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(dll_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.dll_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(dll_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.dll_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(dll_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.dll_cc_sptr_message_subscribers(self, which_port)

dll_cc_sptr_swigregister = _ccsds_swig.dll_cc_sptr_swigregister
dll_cc_sptr_swigregister(dll_cc_sptr)


dll_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dll_cc = dll_cc.make;

class blob_msg_sink_b(object):
    """Proxy of C++ gr::ccsds::blob_msg_sink_b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(blob_len):
        """make(unsigned int const blob_len) -> blob_msg_sink_b_sptr"""
        return _ccsds_swig.blob_msg_sink_b_make(blob_len)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_blob_msg_sink_b
    __del__ = lambda self: None
blob_msg_sink_b_swigregister = _ccsds_swig.blob_msg_sink_b_swigregister
blob_msg_sink_b_swigregister(blob_msg_sink_b)

def blob_msg_sink_b_make(blob_len):
    """blob_msg_sink_b_make(unsigned int const blob_len) -> blob_msg_sink_b_sptr"""
    return _ccsds_swig.blob_msg_sink_b_make(blob_len)

class blob_msg_sink_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::blob_msg_sink_b)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::blob_msg_sink_b)> self) -> blob_msg_sink_b_sptr
        __init__(boost::shared_ptr<(gr::ccsds::blob_msg_sink_b)> self, blob_msg_sink_b p) -> blob_msg_sink_b_sptr
        """
        this = _ccsds_swig.new_blob_msg_sink_b_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(blob_msg_sink_b_sptr self) -> blob_msg_sink_b"""
        return _ccsds_swig.blob_msg_sink_b_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_blob_msg_sink_b_sptr
    __del__ = lambda self: None

    def make(self, blob_len):
        """make(blob_msg_sink_b_sptr self, unsigned int const blob_len) -> blob_msg_sink_b_sptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_make(self, blob_len)


    def history(self):
        """history(blob_msg_sink_b_sptr self) -> unsigned int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(blob_msg_sink_b_sptr self, int which, int delay)
        declare_sample_delay(blob_msg_sink_b_sptr self, unsigned int delay)
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(blob_msg_sink_b_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(blob_msg_sink_b_sptr self) -> double"""
        return _ccsds_swig.blob_msg_sink_b_sptr_relative_rate(self)


    def start(self):
        """start(blob_msg_sink_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_sink_b_sptr_start(self)


    def stop(self):
        """stop(blob_msg_sink_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_sink_b_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(blob_msg_sink_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.blob_msg_sink_b_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(blob_msg_sink_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.blob_msg_sink_b_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(blob_msg_sink_b_sptr self, int m)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(blob_msg_sink_b_sptr self)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(blob_msg_sink_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_sink_b_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(blob_msg_sink_b_sptr self, int m)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(blob_msg_sink_b_sptr self, int i) -> long"""
        return _ccsds_swig.blob_msg_sink_b_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(blob_msg_sink_b_sptr self, long max_output_buffer)
        set_max_output_buffer(blob_msg_sink_b_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(blob_msg_sink_b_sptr self, int i) -> long"""
        return _ccsds_swig.blob_msg_sink_b_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(blob_msg_sink_b_sptr self, long min_output_buffer)
        set_min_output_buffer(blob_msg_sink_b_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(blob_msg_sink_b_sptr self, int which) -> float
        pc_input_buffers_full(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(blob_msg_sink_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(blob_msg_sink_b_sptr self, int which) -> float
        pc_input_buffers_full_var(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(blob_msg_sink_b_sptr self, int which) -> float
        pc_output_buffers_full(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(blob_msg_sink_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(blob_msg_sink_b_sptr self, int which) -> float
        pc_output_buffers_full_var(blob_msg_sink_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(blob_msg_sink_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_sink_b_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(blob_msg_sink_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(blob_msg_sink_b_sptr self)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(blob_msg_sink_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.blob_msg_sink_b_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(blob_msg_sink_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(blob_msg_sink_b_sptr self, int priority) -> int"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(blob_msg_sink_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_sink_b_sptr_name(self)


    def symbol_name(self):
        """symbol_name(blob_msg_sink_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_sink_b_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(blob_msg_sink_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(blob_msg_sink_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(blob_msg_sink_b_sptr self) -> long"""
        return _ccsds_swig.blob_msg_sink_b_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(blob_msg_sink_b_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(blob_msg_sink_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.blob_msg_sink_b_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(blob_msg_sink_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_sink_b_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(blob_msg_sink_b_sptr self, std::string name)"""
        return _ccsds_swig.blob_msg_sink_b_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(blob_msg_sink_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.blob_msg_sink_b_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(blob_msg_sink_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(blob_msg_sink_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(blob_msg_sink_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_sink_b_sptr_message_subscribers(self, which_port)

blob_msg_sink_b_sptr_swigregister = _ccsds_swig.blob_msg_sink_b_sptr_swigregister
blob_msg_sink_b_sptr_swigregister(blob_msg_sink_b_sptr)


blob_msg_sink_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
blob_msg_sink_b = blob_msg_sink_b.make;

class blob_msg_source_b(object):
    """Proxy of C++ gr::ccsds::blob_msg_source_b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(blob_len):
        """make(unsigned int const blob_len) -> blob_msg_source_b_sptr"""
        return _ccsds_swig.blob_msg_source_b_make(blob_len)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_blob_msg_source_b
    __del__ = lambda self: None
blob_msg_source_b_swigregister = _ccsds_swig.blob_msg_source_b_swigregister
blob_msg_source_b_swigregister(blob_msg_source_b)

def blob_msg_source_b_make(blob_len):
    """blob_msg_source_b_make(unsigned int const blob_len) -> blob_msg_source_b_sptr"""
    return _ccsds_swig.blob_msg_source_b_make(blob_len)

class blob_msg_source_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::blob_msg_source_b)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::blob_msg_source_b)> self) -> blob_msg_source_b_sptr
        __init__(boost::shared_ptr<(gr::ccsds::blob_msg_source_b)> self, blob_msg_source_b p) -> blob_msg_source_b_sptr
        """
        this = _ccsds_swig.new_blob_msg_source_b_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(blob_msg_source_b_sptr self) -> blob_msg_source_b"""
        return _ccsds_swig.blob_msg_source_b_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_blob_msg_source_b_sptr
    __del__ = lambda self: None

    def make(self, blob_len):
        """make(blob_msg_source_b_sptr self, unsigned int const blob_len) -> blob_msg_source_b_sptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_make(self, blob_len)


    def history(self):
        """history(blob_msg_source_b_sptr self) -> unsigned int"""
        return _ccsds_swig.blob_msg_source_b_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(blob_msg_source_b_sptr self, int which, int delay)
        declare_sample_delay(blob_msg_source_b_sptr self, unsigned int delay)
        """
        return _ccsds_swig.blob_msg_source_b_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(blob_msg_source_b_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.blob_msg_source_b_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(blob_msg_source_b_sptr self) -> double"""
        return _ccsds_swig.blob_msg_source_b_sptr_relative_rate(self)


    def start(self):
        """start(blob_msg_source_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_source_b_sptr_start(self)


    def stop(self):
        """stop(blob_msg_source_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_source_b_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(blob_msg_source_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.blob_msg_source_b_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(blob_msg_source_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.blob_msg_source_b_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(blob_msg_source_b_sptr self, int m)"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(blob_msg_source_b_sptr self)"""
        return _ccsds_swig.blob_msg_source_b_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(blob_msg_source_b_sptr self) -> bool"""
        return _ccsds_swig.blob_msg_source_b_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(blob_msg_source_b_sptr self, int m)"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(blob_msg_source_b_sptr self, int i) -> long"""
        return _ccsds_swig.blob_msg_source_b_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(blob_msg_source_b_sptr self, long max_output_buffer)
        set_max_output_buffer(blob_msg_source_b_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.blob_msg_source_b_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(blob_msg_source_b_sptr self, int i) -> long"""
        return _ccsds_swig.blob_msg_source_b_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(blob_msg_source_b_sptr self, long min_output_buffer)
        set_min_output_buffer(blob_msg_source_b_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.blob_msg_source_b_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(blob_msg_source_b_sptr self, int which) -> float
        pc_input_buffers_full(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(blob_msg_source_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(blob_msg_source_b_sptr self, int which) -> float
        pc_input_buffers_full_var(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(blob_msg_source_b_sptr self, int which) -> float
        pc_output_buffers_full(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(blob_msg_source_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(blob_msg_source_b_sptr self, int which) -> float
        pc_output_buffers_full_var(blob_msg_source_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.blob_msg_source_b_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(blob_msg_source_b_sptr self) -> float"""
        return _ccsds_swig.blob_msg_source_b_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(blob_msg_source_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(blob_msg_source_b_sptr self)"""
        return _ccsds_swig.blob_msg_source_b_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(blob_msg_source_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.blob_msg_source_b_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(blob_msg_source_b_sptr self) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(blob_msg_source_b_sptr self, int priority) -> int"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(blob_msg_source_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_source_b_sptr_name(self)


    def symbol_name(self):
        """symbol_name(blob_msg_source_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_source_b_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(blob_msg_source_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(blob_msg_source_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(blob_msg_source_b_sptr self) -> long"""
        return _ccsds_swig.blob_msg_source_b_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(blob_msg_source_b_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(blob_msg_source_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.blob_msg_source_b_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(blob_msg_source_b_sptr self) -> std::string"""
        return _ccsds_swig.blob_msg_source_b_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(blob_msg_source_b_sptr self, std::string name)"""
        return _ccsds_swig.blob_msg_source_b_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(blob_msg_source_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.blob_msg_source_b_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(blob_msg_source_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(blob_msg_source_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(blob_msg_source_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.blob_msg_source_b_sptr_message_subscribers(self, which_port)

blob_msg_source_b_sptr_swigregister = _ccsds_swig.blob_msg_source_b_sptr_swigregister
blob_msg_source_b_sptr_swigregister(blob_msg_source_b_sptr)


blob_msg_source_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
blob_msg_source_b = blob_msg_source_b.make;

class softbit_msg_sink_f(object):
    """Proxy of C++ gr::ccsds::softbit_msg_sink_f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_len):
        """make(unsigned int const frame_len) -> softbit_msg_sink_f_sptr"""
        return _ccsds_swig.softbit_msg_sink_f_make(frame_len)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_softbit_msg_sink_f
    __del__ = lambda self: None
softbit_msg_sink_f_swigregister = _ccsds_swig.softbit_msg_sink_f_swigregister
softbit_msg_sink_f_swigregister(softbit_msg_sink_f)

def softbit_msg_sink_f_make(frame_len):
    """softbit_msg_sink_f_make(unsigned int const frame_len) -> softbit_msg_sink_f_sptr"""
    return _ccsds_swig.softbit_msg_sink_f_make(frame_len)

class softbit_msg_sink_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::softbit_msg_sink_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::softbit_msg_sink_f)> self) -> softbit_msg_sink_f_sptr
        __init__(boost::shared_ptr<(gr::ccsds::softbit_msg_sink_f)> self, softbit_msg_sink_f p) -> softbit_msg_sink_f_sptr
        """
        this = _ccsds_swig.new_softbit_msg_sink_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(softbit_msg_sink_f_sptr self) -> softbit_msg_sink_f"""
        return _ccsds_swig.softbit_msg_sink_f_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_softbit_msg_sink_f_sptr
    __del__ = lambda self: None

    def make(self, frame_len):
        """make(softbit_msg_sink_f_sptr self, unsigned int const frame_len) -> softbit_msg_sink_f_sptr"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_make(self, frame_len)


    def history(self):
        """history(softbit_msg_sink_f_sptr self) -> unsigned int"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(softbit_msg_sink_f_sptr self, int which, int delay)
        declare_sample_delay(softbit_msg_sink_f_sptr self, unsigned int delay)
        """
        return _ccsds_swig.softbit_msg_sink_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(softbit_msg_sink_f_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(softbit_msg_sink_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(softbit_msg_sink_f_sptr self) -> double"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_relative_rate(self)


    def start(self):
        """start(softbit_msg_sink_f_sptr self) -> bool"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_start(self)


    def stop(self):
        """stop(softbit_msg_sink_f_sptr self) -> bool"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(softbit_msg_sink_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(softbit_msg_sink_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(softbit_msg_sink_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(softbit_msg_sink_f_sptr self, int m)"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(softbit_msg_sink_f_sptr self)"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(softbit_msg_sink_f_sptr self) -> bool"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(softbit_msg_sink_f_sptr self, int m)"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(softbit_msg_sink_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(softbit_msg_sink_f_sptr self, int i) -> long"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(softbit_msg_sink_f_sptr self, long max_output_buffer)
        set_max_output_buffer(softbit_msg_sink_f_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.softbit_msg_sink_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(softbit_msg_sink_f_sptr self, int i) -> long"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(softbit_msg_sink_f_sptr self, long min_output_buffer)
        set_min_output_buffer(softbit_msg_sink_f_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.softbit_msg_sink_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(softbit_msg_sink_f_sptr self, int which) -> float
        pc_input_buffers_full(softbit_msg_sink_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(softbit_msg_sink_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(softbit_msg_sink_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(softbit_msg_sink_f_sptr self, int which) -> float
        pc_input_buffers_full_var(softbit_msg_sink_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(softbit_msg_sink_f_sptr self, int which) -> float
        pc_output_buffers_full(softbit_msg_sink_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(softbit_msg_sink_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(softbit_msg_sink_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(softbit_msg_sink_f_sptr self, int which) -> float
        pc_output_buffers_full_var(softbit_msg_sink_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(softbit_msg_sink_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(softbit_msg_sink_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(softbit_msg_sink_f_sptr self)"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(softbit_msg_sink_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(softbit_msg_sink_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(softbit_msg_sink_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(softbit_msg_sink_f_sptr self, int priority) -> int"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(softbit_msg_sink_f_sptr self) -> std::string"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(softbit_msg_sink_f_sptr self) -> std::string"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(softbit_msg_sink_f_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(softbit_msg_sink_f_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(softbit_msg_sink_f_sptr self) -> long"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(softbit_msg_sink_f_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(softbit_msg_sink_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(softbit_msg_sink_f_sptr self) -> std::string"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(softbit_msg_sink_f_sptr self, std::string name)"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(softbit_msg_sink_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.softbit_msg_sink_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(softbit_msg_sink_f_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(softbit_msg_sink_f_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(softbit_msg_sink_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.softbit_msg_sink_f_sptr_message_subscribers(self, which_port)

softbit_msg_sink_f_sptr_swigregister = _ccsds_swig.softbit_msg_sink_f_sptr_swigregister
softbit_msg_sink_f_sptr_swigregister(softbit_msg_sink_f_sptr)


softbit_msg_sink_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
softbit_msg_sink_f = softbit_msg_sink_f.make;

class softbit_msg_source_f(object):
    """Proxy of C++ gr::ccsds::softbit_msg_source_f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_len):
        """make(unsigned int const frame_len) -> softbit_msg_source_f_sptr"""
        return _ccsds_swig.softbit_msg_source_f_make(frame_len)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_softbit_msg_source_f
    __del__ = lambda self: None
softbit_msg_source_f_swigregister = _ccsds_swig.softbit_msg_source_f_swigregister
softbit_msg_source_f_swigregister(softbit_msg_source_f)

def softbit_msg_source_f_make(frame_len):
    """softbit_msg_source_f_make(unsigned int const frame_len) -> softbit_msg_source_f_sptr"""
    return _ccsds_swig.softbit_msg_source_f_make(frame_len)

class softbit_msg_source_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::softbit_msg_source_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::softbit_msg_source_f)> self) -> softbit_msg_source_f_sptr
        __init__(boost::shared_ptr<(gr::ccsds::softbit_msg_source_f)> self, softbit_msg_source_f p) -> softbit_msg_source_f_sptr
        """
        this = _ccsds_swig.new_softbit_msg_source_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(softbit_msg_source_f_sptr self) -> softbit_msg_source_f"""
        return _ccsds_swig.softbit_msg_source_f_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_softbit_msg_source_f_sptr
    __del__ = lambda self: None

    def make(self, frame_len):
        """make(softbit_msg_source_f_sptr self, unsigned int const frame_len) -> softbit_msg_source_f_sptr"""
        return _ccsds_swig.softbit_msg_source_f_sptr_make(self, frame_len)


    def history(self):
        """history(softbit_msg_source_f_sptr self) -> unsigned int"""
        return _ccsds_swig.softbit_msg_source_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(softbit_msg_source_f_sptr self, int which, int delay)
        declare_sample_delay(softbit_msg_source_f_sptr self, unsigned int delay)
        """
        return _ccsds_swig.softbit_msg_source_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(softbit_msg_source_f_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.softbit_msg_source_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(softbit_msg_source_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_source_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(softbit_msg_source_f_sptr self) -> double"""
        return _ccsds_swig.softbit_msg_source_f_sptr_relative_rate(self)


    def start(self):
        """start(softbit_msg_source_f_sptr self) -> bool"""
        return _ccsds_swig.softbit_msg_source_f_sptr_start(self)


    def stop(self):
        """stop(softbit_msg_source_f_sptr self) -> bool"""
        return _ccsds_swig.softbit_msg_source_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(softbit_msg_source_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.softbit_msg_source_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(softbit_msg_source_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.softbit_msg_source_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(softbit_msg_source_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_source_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(softbit_msg_source_f_sptr self, int m)"""
        return _ccsds_swig.softbit_msg_source_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(softbit_msg_source_f_sptr self)"""
        return _ccsds_swig.softbit_msg_source_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(softbit_msg_source_f_sptr self) -> bool"""
        return _ccsds_swig.softbit_msg_source_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(softbit_msg_source_f_sptr self, int m)"""
        return _ccsds_swig.softbit_msg_source_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(softbit_msg_source_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_source_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(softbit_msg_source_f_sptr self, int i) -> long"""
        return _ccsds_swig.softbit_msg_source_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(softbit_msg_source_f_sptr self, long max_output_buffer)
        set_max_output_buffer(softbit_msg_source_f_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.softbit_msg_source_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(softbit_msg_source_f_sptr self, int i) -> long"""
        return _ccsds_swig.softbit_msg_source_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(softbit_msg_source_f_sptr self, long min_output_buffer)
        set_min_output_buffer(softbit_msg_source_f_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.softbit_msg_source_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(softbit_msg_source_f_sptr self, int which) -> float
        pc_input_buffers_full(softbit_msg_source_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(softbit_msg_source_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(softbit_msg_source_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(softbit_msg_source_f_sptr self, int which) -> float
        pc_input_buffers_full_var(softbit_msg_source_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(softbit_msg_source_f_sptr self, int which) -> float
        pc_output_buffers_full(softbit_msg_source_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(softbit_msg_source_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(softbit_msg_source_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(softbit_msg_source_f_sptr self, int which) -> float
        pc_output_buffers_full_var(softbit_msg_source_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(softbit_msg_source_f_sptr self) -> float"""
        return _ccsds_swig.softbit_msg_source_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(softbit_msg_source_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.softbit_msg_source_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(softbit_msg_source_f_sptr self)"""
        return _ccsds_swig.softbit_msg_source_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(softbit_msg_source_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.softbit_msg_source_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(softbit_msg_source_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_source_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(softbit_msg_source_f_sptr self) -> int"""
        return _ccsds_swig.softbit_msg_source_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(softbit_msg_source_f_sptr self, int priority) -> int"""
        return _ccsds_swig.softbit_msg_source_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(softbit_msg_source_f_sptr self) -> std::string"""
        return _ccsds_swig.softbit_msg_source_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(softbit_msg_source_f_sptr self) -> std::string"""
        return _ccsds_swig.softbit_msg_source_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(softbit_msg_source_f_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbit_msg_source_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(softbit_msg_source_f_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbit_msg_source_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(softbit_msg_source_f_sptr self) -> long"""
        return _ccsds_swig.softbit_msg_source_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(softbit_msg_source_f_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.softbit_msg_source_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(softbit_msg_source_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.softbit_msg_source_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(softbit_msg_source_f_sptr self) -> std::string"""
        return _ccsds_swig.softbit_msg_source_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(softbit_msg_source_f_sptr self, std::string name)"""
        return _ccsds_swig.softbit_msg_source_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(softbit_msg_source_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.softbit_msg_source_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(softbit_msg_source_f_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbit_msg_source_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(softbit_msg_source_f_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbit_msg_source_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(softbit_msg_source_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.softbit_msg_source_f_sptr_message_subscribers(self, which_port)

softbit_msg_source_f_sptr_swigregister = _ccsds_swig.softbit_msg_source_f_sptr_swigregister
softbit_msg_source_f_sptr_swigregister(softbit_msg_source_f_sptr)


softbit_msg_source_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
softbit_msg_source_f = softbit_msg_source_f.make;

class softbits_msg_to_bytes_b(object):
    """Proxy of C++ gr::ccsds::softbits_msg_to_bytes_b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> softbits_msg_to_bytes_b_sptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_make()

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_softbits_msg_to_bytes_b
    __del__ = lambda self: None
softbits_msg_to_bytes_b_swigregister = _ccsds_swig.softbits_msg_to_bytes_b_swigregister
softbits_msg_to_bytes_b_swigregister(softbits_msg_to_bytes_b)

def softbits_msg_to_bytes_b_make():
    """softbits_msg_to_bytes_b_make() -> softbits_msg_to_bytes_b_sptr"""
    return _ccsds_swig.softbits_msg_to_bytes_b_make()

class softbits_msg_to_bytes_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::softbits_msg_to_bytes_b)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::softbits_msg_to_bytes_b)> self) -> softbits_msg_to_bytes_b_sptr
        __init__(boost::shared_ptr<(gr::ccsds::softbits_msg_to_bytes_b)> self, softbits_msg_to_bytes_b p) -> softbits_msg_to_bytes_b_sptr
        """
        this = _ccsds_swig.new_softbits_msg_to_bytes_b_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(softbits_msg_to_bytes_b_sptr self) -> softbits_msg_to_bytes_b"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_softbits_msg_to_bytes_b_sptr
    __del__ = lambda self: None

    def make(self):
        """make(softbits_msg_to_bytes_b_sptr self) -> softbits_msg_to_bytes_b_sptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_make(self)


    def history(self):
        """history(softbits_msg_to_bytes_b_sptr self) -> unsigned int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(softbits_msg_to_bytes_b_sptr self, int which, int delay)
        declare_sample_delay(softbits_msg_to_bytes_b_sptr self, unsigned int delay)
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(softbits_msg_to_bytes_b_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(softbits_msg_to_bytes_b_sptr self) -> double"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_relative_rate(self)


    def start(self):
        """start(softbits_msg_to_bytes_b_sptr self) -> bool"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_start(self)


    def stop(self):
        """stop(softbits_msg_to_bytes_b_sptr self) -> bool"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(softbits_msg_to_bytes_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(softbits_msg_to_bytes_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(softbits_msg_to_bytes_b_sptr self, int m)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(softbits_msg_to_bytes_b_sptr self)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(softbits_msg_to_bytes_b_sptr self) -> bool"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(softbits_msg_to_bytes_b_sptr self, int m)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(softbits_msg_to_bytes_b_sptr self, int i) -> long"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(softbits_msg_to_bytes_b_sptr self, long max_output_buffer)
        set_max_output_buffer(softbits_msg_to_bytes_b_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(softbits_msg_to_bytes_b_sptr self, int i) -> long"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(softbits_msg_to_bytes_b_sptr self, long min_output_buffer)
        set_min_output_buffer(softbits_msg_to_bytes_b_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_input_buffers_full(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_input_buffers_full_var(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_output_buffers_full(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(softbits_msg_to_bytes_b_sptr self, int which) -> float
        pc_output_buffers_full_var(softbits_msg_to_bytes_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(softbits_msg_to_bytes_b_sptr self) -> float"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(softbits_msg_to_bytes_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(softbits_msg_to_bytes_b_sptr self)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(softbits_msg_to_bytes_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(softbits_msg_to_bytes_b_sptr self) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(softbits_msg_to_bytes_b_sptr self, int priority) -> int"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(softbits_msg_to_bytes_b_sptr self) -> std::string"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_name(self)


    def symbol_name(self):
        """symbol_name(softbits_msg_to_bytes_b_sptr self) -> std::string"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(softbits_msg_to_bytes_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(softbits_msg_to_bytes_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(softbits_msg_to_bytes_b_sptr self) -> long"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(softbits_msg_to_bytes_b_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(softbits_msg_to_bytes_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(softbits_msg_to_bytes_b_sptr self) -> std::string"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(softbits_msg_to_bytes_b_sptr self, std::string name)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(softbits_msg_to_bytes_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(softbits_msg_to_bytes_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(softbits_msg_to_bytes_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(softbits_msg_to_bytes_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.softbits_msg_to_bytes_b_sptr_message_subscribers(self, which_port)

softbits_msg_to_bytes_b_sptr_swigregister = _ccsds_swig.softbits_msg_to_bytes_b_sptr_swigregister
softbits_msg_to_bytes_b_sptr_swigregister(softbits_msg_to_bytes_b_sptr)


softbits_msg_to_bytes_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
softbits_msg_to_bytes_b = softbits_msg_to_bytes_b.make;

class rs_encode(object):
    """Proxy of C++ gr::ccsds::rs_encode class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(I):
        """make(unsigned int const I) -> rs_encode_sptr"""
        return _ccsds_swig.rs_encode_make(I)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_rs_encode
    __del__ = lambda self: None
rs_encode_swigregister = _ccsds_swig.rs_encode_swigregister
rs_encode_swigregister(rs_encode)

def rs_encode_make(I):
    """rs_encode_make(unsigned int const I) -> rs_encode_sptr"""
    return _ccsds_swig.rs_encode_make(I)

class rs_encode_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::rs_encode)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::rs_encode)> self) -> rs_encode_sptr
        __init__(boost::shared_ptr<(gr::ccsds::rs_encode)> self, rs_encode p) -> rs_encode_sptr
        """
        this = _ccsds_swig.new_rs_encode_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(rs_encode_sptr self) -> rs_encode"""
        return _ccsds_swig.rs_encode_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_rs_encode_sptr
    __del__ = lambda self: None

    def make(self, I):
        """make(rs_encode_sptr self, unsigned int const I) -> rs_encode_sptr"""
        return _ccsds_swig.rs_encode_sptr_make(self, I)


    def history(self):
        """history(rs_encode_sptr self) -> unsigned int"""
        return _ccsds_swig.rs_encode_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rs_encode_sptr self, int which, int delay)
        declare_sample_delay(rs_encode_sptr self, unsigned int delay)
        """
        return _ccsds_swig.rs_encode_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(rs_encode_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.rs_encode_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(rs_encode_sptr self) -> double"""
        return _ccsds_swig.rs_encode_sptr_relative_rate(self)


    def start(self):
        """start(rs_encode_sptr self) -> bool"""
        return _ccsds_swig.rs_encode_sptr_start(self)


    def stop(self):
        """stop(rs_encode_sptr self) -> bool"""
        return _ccsds_swig.rs_encode_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(rs_encode_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.rs_encode_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(rs_encode_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.rs_encode_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(rs_encode_sptr self, int m)"""
        return _ccsds_swig.rs_encode_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rs_encode_sptr self)"""
        return _ccsds_swig.rs_encode_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rs_encode_sptr self) -> bool"""
        return _ccsds_swig.rs_encode_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(rs_encode_sptr self, int m)"""
        return _ccsds_swig.rs_encode_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(rs_encode_sptr self, int i) -> long"""
        return _ccsds_swig.rs_encode_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rs_encode_sptr self, long max_output_buffer)
        set_max_output_buffer(rs_encode_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.rs_encode_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(rs_encode_sptr self, int i) -> long"""
        return _ccsds_swig.rs_encode_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rs_encode_sptr self, long min_output_buffer)
        set_min_output_buffer(rs_encode_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.rs_encode_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rs_encode_sptr self, int which) -> float
        pc_input_buffers_full(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rs_encode_sptr self, int which) -> float
        pc_input_buffers_full_avg(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rs_encode_sptr self, int which) -> float
        pc_input_buffers_full_var(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rs_encode_sptr self, int which) -> float
        pc_output_buffers_full(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rs_encode_sptr self, int which) -> float
        pc_output_buffers_full_avg(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rs_encode_sptr self, int which) -> float
        pc_output_buffers_full_var(rs_encode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_encode_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(rs_encode_sptr self) -> float"""
        return _ccsds_swig.rs_encode_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(rs_encode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.rs_encode_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(rs_encode_sptr self)"""
        return _ccsds_swig.rs_encode_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(rs_encode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.rs_encode_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(rs_encode_sptr self) -> int"""
        return _ccsds_swig.rs_encode_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(rs_encode_sptr self, int priority) -> int"""
        return _ccsds_swig.rs_encode_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(rs_encode_sptr self) -> std::string"""
        return _ccsds_swig.rs_encode_sptr_name(self)


    def symbol_name(self):
        """symbol_name(rs_encode_sptr self) -> std::string"""
        return _ccsds_swig.rs_encode_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(rs_encode_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.rs_encode_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(rs_encode_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.rs_encode_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(rs_encode_sptr self) -> long"""
        return _ccsds_swig.rs_encode_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(rs_encode_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.rs_encode_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(rs_encode_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.rs_encode_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(rs_encode_sptr self) -> std::string"""
        return _ccsds_swig.rs_encode_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(rs_encode_sptr self, std::string name)"""
        return _ccsds_swig.rs_encode_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(rs_encode_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.rs_encode_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(rs_encode_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.rs_encode_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(rs_encode_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.rs_encode_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(rs_encode_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.rs_encode_sptr_message_subscribers(self, which_port)

rs_encode_sptr_swigregister = _ccsds_swig.rs_encode_sptr_swigregister
rs_encode_sptr_swigregister(rs_encode_sptr)


rs_encode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rs_encode = rs_encode.make;

class rs_decode(object):
    """Proxy of C++ gr::ccsds::rs_decode class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    BERLEKAMP = _ccsds_swig.rs_decode_BERLEKAMP
    CONVENTIONAL = _ccsds_swig.rs_decode_CONVENTIONAL

    def make(I, representation):
        """make(unsigned int const I, gr::ccsds::rs_decode::repr_t const representation) -> rs_decode_sptr"""
        return _ccsds_swig.rs_decode_make(I, representation)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_rs_decode
    __del__ = lambda self: None
rs_decode_swigregister = _ccsds_swig.rs_decode_swigregister
rs_decode_swigregister(rs_decode)

def rs_decode_make(I, representation):
    """rs_decode_make(unsigned int const I, gr::ccsds::rs_decode::repr_t const representation) -> rs_decode_sptr"""
    return _ccsds_swig.rs_decode_make(I, representation)

class rs_decode_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::rs_decode)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::rs_decode)> self) -> rs_decode_sptr
        __init__(boost::shared_ptr<(gr::ccsds::rs_decode)> self, rs_decode p) -> rs_decode_sptr
        """
        this = _ccsds_swig.new_rs_decode_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(rs_decode_sptr self) -> rs_decode"""
        return _ccsds_swig.rs_decode_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_rs_decode_sptr
    __del__ = lambda self: None

    def make(self, I, representation):
        """make(rs_decode_sptr self, unsigned int const I, gr::ccsds::rs_decode::repr_t const representation) -> rs_decode_sptr"""
        return _ccsds_swig.rs_decode_sptr_make(self, I, representation)


    def history(self):
        """history(rs_decode_sptr self) -> unsigned int"""
        return _ccsds_swig.rs_decode_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rs_decode_sptr self, int which, int delay)
        declare_sample_delay(rs_decode_sptr self, unsigned int delay)
        """
        return _ccsds_swig.rs_decode_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(rs_decode_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.rs_decode_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(rs_decode_sptr self) -> double"""
        return _ccsds_swig.rs_decode_sptr_relative_rate(self)


    def start(self):
        """start(rs_decode_sptr self) -> bool"""
        return _ccsds_swig.rs_decode_sptr_start(self)


    def stop(self):
        """stop(rs_decode_sptr self) -> bool"""
        return _ccsds_swig.rs_decode_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(rs_decode_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.rs_decode_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(rs_decode_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.rs_decode_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(rs_decode_sptr self, int m)"""
        return _ccsds_swig.rs_decode_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rs_decode_sptr self)"""
        return _ccsds_swig.rs_decode_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rs_decode_sptr self) -> bool"""
        return _ccsds_swig.rs_decode_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(rs_decode_sptr self, int m)"""
        return _ccsds_swig.rs_decode_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(rs_decode_sptr self, int i) -> long"""
        return _ccsds_swig.rs_decode_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rs_decode_sptr self, long max_output_buffer)
        set_max_output_buffer(rs_decode_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.rs_decode_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(rs_decode_sptr self, int i) -> long"""
        return _ccsds_swig.rs_decode_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rs_decode_sptr self, long min_output_buffer)
        set_min_output_buffer(rs_decode_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.rs_decode_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rs_decode_sptr self, int which) -> float
        pc_input_buffers_full(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rs_decode_sptr self, int which) -> float
        pc_input_buffers_full_avg(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rs_decode_sptr self, int which) -> float
        pc_input_buffers_full_var(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rs_decode_sptr self, int which) -> float
        pc_output_buffers_full(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rs_decode_sptr self, int which) -> float
        pc_output_buffers_full_avg(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rs_decode_sptr self, int which) -> float
        pc_output_buffers_full_var(rs_decode_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.rs_decode_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(rs_decode_sptr self) -> float"""
        return _ccsds_swig.rs_decode_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(rs_decode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.rs_decode_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(rs_decode_sptr self)"""
        return _ccsds_swig.rs_decode_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(rs_decode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.rs_decode_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(rs_decode_sptr self) -> int"""
        return _ccsds_swig.rs_decode_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(rs_decode_sptr self, int priority) -> int"""
        return _ccsds_swig.rs_decode_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(rs_decode_sptr self) -> std::string"""
        return _ccsds_swig.rs_decode_sptr_name(self)


    def symbol_name(self):
        """symbol_name(rs_decode_sptr self) -> std::string"""
        return _ccsds_swig.rs_decode_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(rs_decode_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.rs_decode_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(rs_decode_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.rs_decode_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(rs_decode_sptr self) -> long"""
        return _ccsds_swig.rs_decode_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(rs_decode_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.rs_decode_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(rs_decode_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.rs_decode_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(rs_decode_sptr self) -> std::string"""
        return _ccsds_swig.rs_decode_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(rs_decode_sptr self, std::string name)"""
        return _ccsds_swig.rs_decode_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(rs_decode_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.rs_decode_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(rs_decode_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.rs_decode_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(rs_decode_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.rs_decode_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(rs_decode_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.rs_decode_sptr_message_subscribers(self, which_port)

rs_decode_sptr_swigregister = _ccsds_swig.rs_decode_sptr_swigregister
rs_decode_sptr_swigregister(rs_decode_sptr)


rs_decode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rs_decode = rs_decode.make;

class mpsk_ambiguity_resolver_f(object):
    """Proxy of C++ gr::ccsds::mpsk_ambiguity_resolver_f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(M, ASM, asm_len, threshold, correlation_threshold, frame_length, num_tail_syms=0):
        """make(unsigned int const M, std::string ASM, unsigned int const asm_len, unsigned int const threshold, float const correlation_threshold, unsigned int const frame_length, unsigned int const num_tail_syms=0) -> mpsk_ambiguity_resolver_f_sptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_make(M, ASM, asm_len, threshold, correlation_threshold, frame_length, num_tail_syms)

    make = staticmethod(make)

    def get_correlation(self):
        """get_correlation(mpsk_ambiguity_resolver_f self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_get_correlation(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_ambiguity_resolver_f
    __del__ = lambda self: None
mpsk_ambiguity_resolver_f_swigregister = _ccsds_swig.mpsk_ambiguity_resolver_f_swigregister
mpsk_ambiguity_resolver_f_swigregister(mpsk_ambiguity_resolver_f)

def mpsk_ambiguity_resolver_f_make(M, ASM, asm_len, threshold, correlation_threshold, frame_length, num_tail_syms=0):
    """mpsk_ambiguity_resolver_f_make(unsigned int const M, std::string ASM, unsigned int const asm_len, unsigned int const threshold, float const correlation_threshold, unsigned int const frame_length, unsigned int const num_tail_syms=0) -> mpsk_ambiguity_resolver_f_sptr"""
    return _ccsds_swig.mpsk_ambiguity_resolver_f_make(M, ASM, asm_len, threshold, correlation_threshold, frame_length, num_tail_syms)

class mpsk_ambiguity_resolver_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::mpsk_ambiguity_resolver_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_ambiguity_resolver_f)> self) -> mpsk_ambiguity_resolver_f_sptr
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_ambiguity_resolver_f)> self, mpsk_ambiguity_resolver_f p) -> mpsk_ambiguity_resolver_f_sptr
        """
        this = _ccsds_swig.new_mpsk_ambiguity_resolver_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(mpsk_ambiguity_resolver_f_sptr self) -> mpsk_ambiguity_resolver_f"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_ambiguity_resolver_f_sptr
    __del__ = lambda self: None

    def make(self, M, ASM, asm_len, threshold, correlation_threshold, frame_length, num_tail_syms=0):
        """make(mpsk_ambiguity_resolver_f_sptr self, unsigned int const M, std::string ASM, unsigned int const asm_len, unsigned int const threshold, float const correlation_threshold, unsigned int const frame_length, unsigned int const num_tail_syms=0) -> mpsk_ambiguity_resolver_f_sptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_make(self, M, ASM, asm_len, threshold, correlation_threshold, frame_length, num_tail_syms)


    def get_correlation(self):
        """get_correlation(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_get_correlation(self)


    def history(self):
        """history(mpsk_ambiguity_resolver_f_sptr self) -> unsigned int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mpsk_ambiguity_resolver_f_sptr self, int which, int delay)
        declare_sample_delay(mpsk_ambiguity_resolver_f_sptr self, unsigned int delay)
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(mpsk_ambiguity_resolver_f_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(mpsk_ambiguity_resolver_f_sptr self) -> double"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_relative_rate(self)


    def start(self):
        """start(mpsk_ambiguity_resolver_f_sptr self) -> bool"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_start(self)


    def stop(self):
        """stop(mpsk_ambiguity_resolver_f_sptr self) -> bool"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(mpsk_ambiguity_resolver_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(mpsk_ambiguity_resolver_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(mpsk_ambiguity_resolver_f_sptr self, int m)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mpsk_ambiguity_resolver_f_sptr self)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mpsk_ambiguity_resolver_f_sptr self) -> bool"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(mpsk_ambiguity_resolver_f_sptr self, int m)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(mpsk_ambiguity_resolver_f_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mpsk_ambiguity_resolver_f_sptr self, long max_output_buffer)
        set_max_output_buffer(mpsk_ambiguity_resolver_f_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(mpsk_ambiguity_resolver_f_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mpsk_ambiguity_resolver_f_sptr self, long min_output_buffer)
        set_min_output_buffer(mpsk_ambiguity_resolver_f_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_input_buffers_full(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_input_buffers_full_var(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_output_buffers_full(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mpsk_ambiguity_resolver_f_sptr self, int which) -> float
        pc_output_buffers_full_var(mpsk_ambiguity_resolver_f_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(mpsk_ambiguity_resolver_f_sptr self) -> float"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(mpsk_ambiguity_resolver_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(mpsk_ambiguity_resolver_f_sptr self)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(mpsk_ambiguity_resolver_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(mpsk_ambiguity_resolver_f_sptr self) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(mpsk_ambiguity_resolver_f_sptr self, int priority) -> int"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(mpsk_ambiguity_resolver_f_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(mpsk_ambiguity_resolver_f_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(mpsk_ambiguity_resolver_f_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(mpsk_ambiguity_resolver_f_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(mpsk_ambiguity_resolver_f_sptr self) -> long"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(mpsk_ambiguity_resolver_f_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(mpsk_ambiguity_resolver_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(mpsk_ambiguity_resolver_f_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(mpsk_ambiguity_resolver_f_sptr self, std::string name)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(mpsk_ambiguity_resolver_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(mpsk_ambiguity_resolver_f_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(mpsk_ambiguity_resolver_f_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(mpsk_ambiguity_resolver_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_message_subscribers(self, which_port)

mpsk_ambiguity_resolver_f_sptr_swigregister = _ccsds_swig.mpsk_ambiguity_resolver_f_sptr_swigregister
mpsk_ambiguity_resolver_f_sptr_swigregister(mpsk_ambiguity_resolver_f_sptr)


mpsk_ambiguity_resolver_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mpsk_ambiguity_resolver_f = mpsk_ambiguity_resolver_f.make;

class conv_decode27(object):
    """Proxy of C++ gr::ccsds::conv_decode27 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(gen_poly_c1, gen_poly_c2, puncturing_type, block_len, ASM):
        """make(unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type, unsigned int const block_len, std::string ASM) -> conv_decode27_sptr"""
        return _ccsds_swig.conv_decode27_make(gen_poly_c1, gen_poly_c2, puncturing_type, block_len, ASM)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_conv_decode27
    __del__ = lambda self: None
conv_decode27_swigregister = _ccsds_swig.conv_decode27_swigregister
conv_decode27_swigregister(conv_decode27)

def conv_decode27_make(gen_poly_c1, gen_poly_c2, puncturing_type, block_len, ASM):
    """conv_decode27_make(unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type, unsigned int const block_len, std::string ASM) -> conv_decode27_sptr"""
    return _ccsds_swig.conv_decode27_make(gen_poly_c1, gen_poly_c2, puncturing_type, block_len, ASM)

class conv_decode27_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::conv_decode27)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::conv_decode27)> self) -> conv_decode27_sptr
        __init__(boost::shared_ptr<(gr::ccsds::conv_decode27)> self, conv_decode27 p) -> conv_decode27_sptr
        """
        this = _ccsds_swig.new_conv_decode27_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(conv_decode27_sptr self) -> conv_decode27"""
        return _ccsds_swig.conv_decode27_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_conv_decode27_sptr
    __del__ = lambda self: None

    def make(self, gen_poly_c1, gen_poly_c2, puncturing_type, block_len, ASM):
        """make(conv_decode27_sptr self, unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type, unsigned int const block_len, std::string ASM) -> conv_decode27_sptr"""
        return _ccsds_swig.conv_decode27_sptr_make(self, gen_poly_c1, gen_poly_c2, puncturing_type, block_len, ASM)


    def history(self):
        """history(conv_decode27_sptr self) -> unsigned int"""
        return _ccsds_swig.conv_decode27_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(conv_decode27_sptr self, int which, int delay)
        declare_sample_delay(conv_decode27_sptr self, unsigned int delay)
        """
        return _ccsds_swig.conv_decode27_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(conv_decode27_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.conv_decode27_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(conv_decode27_sptr self) -> double"""
        return _ccsds_swig.conv_decode27_sptr_relative_rate(self)


    def start(self):
        """start(conv_decode27_sptr self) -> bool"""
        return _ccsds_swig.conv_decode27_sptr_start(self)


    def stop(self):
        """stop(conv_decode27_sptr self) -> bool"""
        return _ccsds_swig.conv_decode27_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(conv_decode27_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.conv_decode27_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(conv_decode27_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.conv_decode27_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(conv_decode27_sptr self, int m)"""
        return _ccsds_swig.conv_decode27_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(conv_decode27_sptr self)"""
        return _ccsds_swig.conv_decode27_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(conv_decode27_sptr self) -> bool"""
        return _ccsds_swig.conv_decode27_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(conv_decode27_sptr self, int m)"""
        return _ccsds_swig.conv_decode27_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(conv_decode27_sptr self, int i) -> long"""
        return _ccsds_swig.conv_decode27_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(conv_decode27_sptr self, long max_output_buffer)
        set_max_output_buffer(conv_decode27_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.conv_decode27_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(conv_decode27_sptr self, int i) -> long"""
        return _ccsds_swig.conv_decode27_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(conv_decode27_sptr self, long min_output_buffer)
        set_min_output_buffer(conv_decode27_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.conv_decode27_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(conv_decode27_sptr self, int which) -> float
        pc_input_buffers_full(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(conv_decode27_sptr self, int which) -> float
        pc_input_buffers_full_avg(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(conv_decode27_sptr self, int which) -> float
        pc_input_buffers_full_var(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(conv_decode27_sptr self, int which) -> float
        pc_output_buffers_full(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(conv_decode27_sptr self, int which) -> float
        pc_output_buffers_full_avg(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(conv_decode27_sptr self, int which) -> float
        pc_output_buffers_full_var(conv_decode27_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_decode27_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(conv_decode27_sptr self) -> float"""
        return _ccsds_swig.conv_decode27_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(conv_decode27_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.conv_decode27_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(conv_decode27_sptr self)"""
        return _ccsds_swig.conv_decode27_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(conv_decode27_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.conv_decode27_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(conv_decode27_sptr self) -> int"""
        return _ccsds_swig.conv_decode27_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(conv_decode27_sptr self, int priority) -> int"""
        return _ccsds_swig.conv_decode27_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(conv_decode27_sptr self) -> std::string"""
        return _ccsds_swig.conv_decode27_sptr_name(self)


    def symbol_name(self):
        """symbol_name(conv_decode27_sptr self) -> std::string"""
        return _ccsds_swig.conv_decode27_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(conv_decode27_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.conv_decode27_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(conv_decode27_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.conv_decode27_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(conv_decode27_sptr self) -> long"""
        return _ccsds_swig.conv_decode27_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(conv_decode27_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.conv_decode27_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(conv_decode27_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.conv_decode27_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(conv_decode27_sptr self) -> std::string"""
        return _ccsds_swig.conv_decode27_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(conv_decode27_sptr self, std::string name)"""
        return _ccsds_swig.conv_decode27_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(conv_decode27_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.conv_decode27_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(conv_decode27_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.conv_decode27_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(conv_decode27_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.conv_decode27_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(conv_decode27_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.conv_decode27_sptr_message_subscribers(self, which_port)

conv_decode27_sptr_swigregister = _ccsds_swig.conv_decode27_sptr_swigregister
conv_decode27_sptr_swigregister(conv_decode27_sptr)


conv_decode27_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
conv_decode27 = conv_decode27.make;

class mpsk_detector_soft_cf(object):
    """Proxy of C++ gr::ccsds::mpsk_detector_soft_cf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(M):
        """make(unsigned int const M) -> mpsk_detector_soft_cf_sptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_make(M)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_mpsk_detector_soft_cf
    __del__ = lambda self: None
mpsk_detector_soft_cf_swigregister = _ccsds_swig.mpsk_detector_soft_cf_swigregister
mpsk_detector_soft_cf_swigregister(mpsk_detector_soft_cf)

def mpsk_detector_soft_cf_make(M):
    """mpsk_detector_soft_cf_make(unsigned int const M) -> mpsk_detector_soft_cf_sptr"""
    return _ccsds_swig.mpsk_detector_soft_cf_make(M)

class mpsk_detector_soft_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::mpsk_detector_soft_cf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_detector_soft_cf)> self) -> mpsk_detector_soft_cf_sptr
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_detector_soft_cf)> self, mpsk_detector_soft_cf p) -> mpsk_detector_soft_cf_sptr
        """
        this = _ccsds_swig.new_mpsk_detector_soft_cf_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(mpsk_detector_soft_cf_sptr self) -> mpsk_detector_soft_cf"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_detector_soft_cf_sptr
    __del__ = lambda self: None

    def make(self, M):
        """make(mpsk_detector_soft_cf_sptr self, unsigned int const M) -> mpsk_detector_soft_cf_sptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_make(self, M)


    def history(self):
        """history(mpsk_detector_soft_cf_sptr self) -> unsigned int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mpsk_detector_soft_cf_sptr self, int which, int delay)
        declare_sample_delay(mpsk_detector_soft_cf_sptr self, unsigned int delay)
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(mpsk_detector_soft_cf_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(mpsk_detector_soft_cf_sptr self) -> double"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_relative_rate(self)


    def start(self):
        """start(mpsk_detector_soft_cf_sptr self) -> bool"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_start(self)


    def stop(self):
        """stop(mpsk_detector_soft_cf_sptr self) -> bool"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(mpsk_detector_soft_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(mpsk_detector_soft_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(mpsk_detector_soft_cf_sptr self, int m)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mpsk_detector_soft_cf_sptr self)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mpsk_detector_soft_cf_sptr self) -> bool"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(mpsk_detector_soft_cf_sptr self, int m)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(mpsk_detector_soft_cf_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mpsk_detector_soft_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(mpsk_detector_soft_cf_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(mpsk_detector_soft_cf_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mpsk_detector_soft_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(mpsk_detector_soft_cf_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_input_buffers_full(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_output_buffers_full(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mpsk_detector_soft_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(mpsk_detector_soft_cf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(mpsk_detector_soft_cf_sptr self) -> float"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(mpsk_detector_soft_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(mpsk_detector_soft_cf_sptr self)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(mpsk_detector_soft_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(mpsk_detector_soft_cf_sptr self) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(mpsk_detector_soft_cf_sptr self, int priority) -> int"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(mpsk_detector_soft_cf_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(mpsk_detector_soft_cf_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(mpsk_detector_soft_cf_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(mpsk_detector_soft_cf_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(mpsk_detector_soft_cf_sptr self) -> long"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(mpsk_detector_soft_cf_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(mpsk_detector_soft_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(mpsk_detector_soft_cf_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(mpsk_detector_soft_cf_sptr self, std::string name)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(mpsk_detector_soft_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(mpsk_detector_soft_cf_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(mpsk_detector_soft_cf_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(mpsk_detector_soft_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_detector_soft_cf_sptr_message_subscribers(self, which_port)

mpsk_detector_soft_cf_sptr_swigregister = _ccsds_swig.mpsk_detector_soft_cf_sptr_swigregister
mpsk_detector_soft_cf_sptr_swigregister(mpsk_detector_soft_cf_sptr)


mpsk_detector_soft_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mpsk_detector_soft_cf = mpsk_detector_soft_cf.make;

class mpsk_mod_bc(object):
    """Proxy of C++ gr::ccsds::mpsk_mod_bc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(M):
        """make(unsigned int M) -> mpsk_mod_bc_sptr"""
        return _ccsds_swig.mpsk_mod_bc_make(M)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_mpsk_mod_bc
    __del__ = lambda self: None
mpsk_mod_bc_swigregister = _ccsds_swig.mpsk_mod_bc_swigregister
mpsk_mod_bc_swigregister(mpsk_mod_bc)

def mpsk_mod_bc_make(M):
    """mpsk_mod_bc_make(unsigned int M) -> mpsk_mod_bc_sptr"""
    return _ccsds_swig.mpsk_mod_bc_make(M)

class mpsk_mod_bc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::mpsk_mod_bc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_mod_bc)> self) -> mpsk_mod_bc_sptr
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_mod_bc)> self, mpsk_mod_bc p) -> mpsk_mod_bc_sptr
        """
        this = _ccsds_swig.new_mpsk_mod_bc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(mpsk_mod_bc_sptr self) -> mpsk_mod_bc"""
        return _ccsds_swig.mpsk_mod_bc_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_mod_bc_sptr
    __del__ = lambda self: None

    def make(self, M):
        """make(mpsk_mod_bc_sptr self, unsigned int M) -> mpsk_mod_bc_sptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_make(self, M)


    def history(self):
        """history(mpsk_mod_bc_sptr self) -> unsigned int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mpsk_mod_bc_sptr self, int which, int delay)
        declare_sample_delay(mpsk_mod_bc_sptr self, unsigned int delay)
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(mpsk_mod_bc_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(mpsk_mod_bc_sptr self) -> double"""
        return _ccsds_swig.mpsk_mod_bc_sptr_relative_rate(self)


    def start(self):
        """start(mpsk_mod_bc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_mod_bc_sptr_start(self)


    def stop(self):
        """stop(mpsk_mod_bc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_mod_bc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(mpsk_mod_bc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.mpsk_mod_bc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(mpsk_mod_bc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.mpsk_mod_bc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(mpsk_mod_bc_sptr self, int m)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mpsk_mod_bc_sptr self)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mpsk_mod_bc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_mod_bc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(mpsk_mod_bc_sptr self, int m)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(mpsk_mod_bc_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_mod_bc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mpsk_mod_bc_sptr self, long max_output_buffer)
        set_max_output_buffer(mpsk_mod_bc_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(mpsk_mod_bc_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_mod_bc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mpsk_mod_bc_sptr self, long min_output_buffer)
        set_min_output_buffer(mpsk_mod_bc_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mpsk_mod_bc_sptr self, int which) -> float
        pc_input_buffers_full(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mpsk_mod_bc_sptr self, int which) -> float
        pc_input_buffers_full_avg(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mpsk_mod_bc_sptr self, int which) -> float
        pc_input_buffers_full_var(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mpsk_mod_bc_sptr self, int which) -> float
        pc_output_buffers_full(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mpsk_mod_bc_sptr self, int which) -> float
        pc_output_buffers_full_avg(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mpsk_mod_bc_sptr self, int which) -> float
        pc_output_buffers_full_var(mpsk_mod_bc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(mpsk_mod_bc_sptr self) -> float"""
        return _ccsds_swig.mpsk_mod_bc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(mpsk_mod_bc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(mpsk_mod_bc_sptr self)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(mpsk_mod_bc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.mpsk_mod_bc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(mpsk_mod_bc_sptr self) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(mpsk_mod_bc_sptr self, int priority) -> int"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(mpsk_mod_bc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_mod_bc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(mpsk_mod_bc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_mod_bc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(mpsk_mod_bc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(mpsk_mod_bc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(mpsk_mod_bc_sptr self) -> long"""
        return _ccsds_swig.mpsk_mod_bc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(mpsk_mod_bc_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(mpsk_mod_bc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.mpsk_mod_bc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(mpsk_mod_bc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_mod_bc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(mpsk_mod_bc_sptr self, std::string name)"""
        return _ccsds_swig.mpsk_mod_bc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(mpsk_mod_bc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.mpsk_mod_bc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(mpsk_mod_bc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(mpsk_mod_bc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(mpsk_mod_bc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_mod_bc_sptr_message_subscribers(self, which_port)

mpsk_mod_bc_sptr_swigregister = _ccsds_swig.mpsk_mod_bc_sptr_swigregister
mpsk_mod_bc_sptr_swigregister(mpsk_mod_bc_sptr)


mpsk_mod_bc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mpsk_mod_bc = mpsk_mod_bc.make;

class conv_encode27_bb(object):
    """Proxy of C++ gr::ccsds::conv_encode27_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(gen_poly_c1, gen_poly_c2, puncturing_type):
        """make(unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type) -> conv_encode27_bb_sptr"""
        return _ccsds_swig.conv_encode27_bb_make(gen_poly_c1, gen_poly_c2, puncturing_type)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_conv_encode27_bb
    __del__ = lambda self: None
conv_encode27_bb_swigregister = _ccsds_swig.conv_encode27_bb_swigregister
conv_encode27_bb_swigregister(conv_encode27_bb)

def conv_encode27_bb_make(gen_poly_c1, gen_poly_c2, puncturing_type):
    """conv_encode27_bb_make(unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type) -> conv_encode27_bb_sptr"""
    return _ccsds_swig.conv_encode27_bb_make(gen_poly_c1, gen_poly_c2, puncturing_type)

class conv_encode27_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::conv_encode27_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::conv_encode27_bb)> self) -> conv_encode27_bb_sptr
        __init__(boost::shared_ptr<(gr::ccsds::conv_encode27_bb)> self, conv_encode27_bb p) -> conv_encode27_bb_sptr
        """
        this = _ccsds_swig.new_conv_encode27_bb_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(conv_encode27_bb_sptr self) -> conv_encode27_bb"""
        return _ccsds_swig.conv_encode27_bb_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_conv_encode27_bb_sptr
    __del__ = lambda self: None

    def make(self, gen_poly_c1, gen_poly_c2, puncturing_type):
        """make(conv_encode27_bb_sptr self, unsigned char const gen_poly_c1, unsigned char const gen_poly_c2, gr::ccsds::conv_puncturing27::punct_t puncturing_type) -> conv_encode27_bb_sptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_make(self, gen_poly_c1, gen_poly_c2, puncturing_type)


    def history(self):
        """history(conv_encode27_bb_sptr self) -> unsigned int"""
        return _ccsds_swig.conv_encode27_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(conv_encode27_bb_sptr self, int which, int delay)
        declare_sample_delay(conv_encode27_bb_sptr self, unsigned int delay)
        """
        return _ccsds_swig.conv_encode27_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(conv_encode27_bb_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.conv_encode27_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(conv_encode27_bb_sptr self) -> double"""
        return _ccsds_swig.conv_encode27_bb_sptr_relative_rate(self)


    def start(self):
        """start(conv_encode27_bb_sptr self) -> bool"""
        return _ccsds_swig.conv_encode27_bb_sptr_start(self)


    def stop(self):
        """stop(conv_encode27_bb_sptr self) -> bool"""
        return _ccsds_swig.conv_encode27_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(conv_encode27_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.conv_encode27_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(conv_encode27_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.conv_encode27_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(conv_encode27_bb_sptr self, int m)"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(conv_encode27_bb_sptr self)"""
        return _ccsds_swig.conv_encode27_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(conv_encode27_bb_sptr self) -> bool"""
        return _ccsds_swig.conv_encode27_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(conv_encode27_bb_sptr self, int m)"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(conv_encode27_bb_sptr self, int i) -> long"""
        return _ccsds_swig.conv_encode27_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(conv_encode27_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(conv_encode27_bb_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.conv_encode27_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(conv_encode27_bb_sptr self, int i) -> long"""
        return _ccsds_swig.conv_encode27_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(conv_encode27_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(conv_encode27_bb_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.conv_encode27_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(conv_encode27_bb_sptr self, int which) -> float
        pc_input_buffers_full(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(conv_encode27_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(conv_encode27_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(conv_encode27_bb_sptr self, int which) -> float
        pc_output_buffers_full(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(conv_encode27_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(conv_encode27_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(conv_encode27_bb_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.conv_encode27_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(conv_encode27_bb_sptr self) -> float"""
        return _ccsds_swig.conv_encode27_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(conv_encode27_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(conv_encode27_bb_sptr self)"""
        return _ccsds_swig.conv_encode27_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(conv_encode27_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.conv_encode27_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(conv_encode27_bb_sptr self) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(conv_encode27_bb_sptr self, int priority) -> int"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(conv_encode27_bb_sptr self) -> std::string"""
        return _ccsds_swig.conv_encode27_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(conv_encode27_bb_sptr self) -> std::string"""
        return _ccsds_swig.conv_encode27_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(conv_encode27_bb_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(conv_encode27_bb_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(conv_encode27_bb_sptr self) -> long"""
        return _ccsds_swig.conv_encode27_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(conv_encode27_bb_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(conv_encode27_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.conv_encode27_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(conv_encode27_bb_sptr self) -> std::string"""
        return _ccsds_swig.conv_encode27_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(conv_encode27_bb_sptr self, std::string name)"""
        return _ccsds_swig.conv_encode27_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(conv_encode27_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.conv_encode27_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(conv_encode27_bb_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(conv_encode27_bb_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(conv_encode27_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.conv_encode27_bb_sptr_message_subscribers(self, which_port)

conv_encode27_bb_sptr_swigregister = _ccsds_swig.conv_encode27_bb_sptr_swigregister
conv_encode27_bb_sptr_swigregister(conv_encode27_bb_sptr)


conv_encode27_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
conv_encode27_bb = conv_encode27_bb.make;

class mpsk_preamble_cc(object):
    """Proxy of C++ gr::ccsds::mpsk_preamble_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(num_symbols):
        """make(unsigned int const num_symbols) -> mpsk_preamble_cc_sptr"""
        return _ccsds_swig.mpsk_preamble_cc_make(num_symbols)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_mpsk_preamble_cc
    __del__ = lambda self: None
mpsk_preamble_cc_swigregister = _ccsds_swig.mpsk_preamble_cc_swigregister
mpsk_preamble_cc_swigregister(mpsk_preamble_cc)

def mpsk_preamble_cc_make(num_symbols):
    """mpsk_preamble_cc_make(unsigned int const num_symbols) -> mpsk_preamble_cc_sptr"""
    return _ccsds_swig.mpsk_preamble_cc_make(num_symbols)

class mpsk_preamble_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::mpsk_preamble_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_preamble_cc)> self) -> mpsk_preamble_cc_sptr
        __init__(boost::shared_ptr<(gr::ccsds::mpsk_preamble_cc)> self, mpsk_preamble_cc p) -> mpsk_preamble_cc_sptr
        """
        this = _ccsds_swig.new_mpsk_preamble_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(mpsk_preamble_cc_sptr self) -> mpsk_preamble_cc"""
        return _ccsds_swig.mpsk_preamble_cc_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_mpsk_preamble_cc_sptr
    __del__ = lambda self: None

    def make(self, num_symbols):
        """make(mpsk_preamble_cc_sptr self, unsigned int const num_symbols) -> mpsk_preamble_cc_sptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_make(self, num_symbols)


    def history(self):
        """history(mpsk_preamble_cc_sptr self) -> unsigned int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mpsk_preamble_cc_sptr self, int which, int delay)
        declare_sample_delay(mpsk_preamble_cc_sptr self, unsigned int delay)
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(mpsk_preamble_cc_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(mpsk_preamble_cc_sptr self) -> double"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_relative_rate(self)


    def start(self):
        """start(mpsk_preamble_cc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_start(self)


    def stop(self):
        """stop(mpsk_preamble_cc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(mpsk_preamble_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(mpsk_preamble_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(mpsk_preamble_cc_sptr self, int m)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mpsk_preamble_cc_sptr self)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mpsk_preamble_cc_sptr self) -> bool"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(mpsk_preamble_cc_sptr self, int m)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(mpsk_preamble_cc_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mpsk_preamble_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(mpsk_preamble_cc_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(mpsk_preamble_cc_sptr self, int i) -> long"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mpsk_preamble_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(mpsk_preamble_cc_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mpsk_preamble_cc_sptr self, int which) -> float
        pc_input_buffers_full(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mpsk_preamble_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mpsk_preamble_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mpsk_preamble_cc_sptr self, int which) -> float
        pc_output_buffers_full(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mpsk_preamble_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mpsk_preamble_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(mpsk_preamble_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(mpsk_preamble_cc_sptr self) -> float"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(mpsk_preamble_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(mpsk_preamble_cc_sptr self)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(mpsk_preamble_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(mpsk_preamble_cc_sptr self) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(mpsk_preamble_cc_sptr self, int priority) -> int"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(mpsk_preamble_cc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(mpsk_preamble_cc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(mpsk_preamble_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(mpsk_preamble_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(mpsk_preamble_cc_sptr self) -> long"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(mpsk_preamble_cc_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(mpsk_preamble_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(mpsk_preamble_cc_sptr self) -> std::string"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(mpsk_preamble_cc_sptr self, std::string name)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(mpsk_preamble_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.mpsk_preamble_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(mpsk_preamble_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(mpsk_preamble_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(mpsk_preamble_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.mpsk_preamble_cc_sptr_message_subscribers(self, which_port)

mpsk_preamble_cc_sptr_swigregister = _ccsds_swig.mpsk_preamble_cc_sptr_swigregister
mpsk_preamble_cc_sptr_swigregister(mpsk_preamble_cc_sptr)


mpsk_preamble_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mpsk_preamble_cc = mpsk_preamble_cc.make;

class softbittobit(object):
    """Proxy of C++ gr::ccsds::softbittobit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> softbittobit_sptr"""
        return _ccsds_swig.softbittobit_make()

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_softbittobit
    __del__ = lambda self: None
softbittobit_swigregister = _ccsds_swig.softbittobit_swigregister
softbittobit_swigregister(softbittobit)

def softbittobit_make():
    """softbittobit_make() -> softbittobit_sptr"""
    return _ccsds_swig.softbittobit_make()

class softbittobit_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::softbittobit)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::softbittobit)> self) -> softbittobit_sptr
        __init__(boost::shared_ptr<(gr::ccsds::softbittobit)> self, softbittobit p) -> softbittobit_sptr
        """
        this = _ccsds_swig.new_softbittobit_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(softbittobit_sptr self) -> softbittobit"""
        return _ccsds_swig.softbittobit_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_softbittobit_sptr
    __del__ = lambda self: None

    def make(self):
        """make(softbittobit_sptr self) -> softbittobit_sptr"""
        return _ccsds_swig.softbittobit_sptr_make(self)


    def history(self):
        """history(softbittobit_sptr self) -> unsigned int"""
        return _ccsds_swig.softbittobit_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(softbittobit_sptr self, int which, int delay)
        declare_sample_delay(softbittobit_sptr self, unsigned int delay)
        """
        return _ccsds_swig.softbittobit_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(softbittobit_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.softbittobit_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(softbittobit_sptr self) -> double"""
        return _ccsds_swig.softbittobit_sptr_relative_rate(self)


    def start(self):
        """start(softbittobit_sptr self) -> bool"""
        return _ccsds_swig.softbittobit_sptr_start(self)


    def stop(self):
        """stop(softbittobit_sptr self) -> bool"""
        return _ccsds_swig.softbittobit_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(softbittobit_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.softbittobit_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(softbittobit_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.softbittobit_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(softbittobit_sptr self, int m)"""
        return _ccsds_swig.softbittobit_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(softbittobit_sptr self)"""
        return _ccsds_swig.softbittobit_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(softbittobit_sptr self) -> bool"""
        return _ccsds_swig.softbittobit_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(softbittobit_sptr self, int m)"""
        return _ccsds_swig.softbittobit_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(softbittobit_sptr self, int i) -> long"""
        return _ccsds_swig.softbittobit_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(softbittobit_sptr self, long max_output_buffer)
        set_max_output_buffer(softbittobit_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.softbittobit_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(softbittobit_sptr self, int i) -> long"""
        return _ccsds_swig.softbittobit_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(softbittobit_sptr self, long min_output_buffer)
        set_min_output_buffer(softbittobit_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.softbittobit_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(softbittobit_sptr self, int which) -> float
        pc_input_buffers_full(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(softbittobit_sptr self, int which) -> float
        pc_input_buffers_full_avg(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(softbittobit_sptr self, int which) -> float
        pc_input_buffers_full_var(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(softbittobit_sptr self, int which) -> float
        pc_output_buffers_full(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(softbittobit_sptr self, int which) -> float
        pc_output_buffers_full_avg(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(softbittobit_sptr self, int which) -> float
        pc_output_buffers_full_var(softbittobit_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.softbittobit_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(softbittobit_sptr self) -> float"""
        return _ccsds_swig.softbittobit_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(softbittobit_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.softbittobit_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(softbittobit_sptr self)"""
        return _ccsds_swig.softbittobit_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(softbittobit_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.softbittobit_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(softbittobit_sptr self) -> int"""
        return _ccsds_swig.softbittobit_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(softbittobit_sptr self, int priority) -> int"""
        return _ccsds_swig.softbittobit_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(softbittobit_sptr self) -> std::string"""
        return _ccsds_swig.softbittobit_sptr_name(self)


    def symbol_name(self):
        """symbol_name(softbittobit_sptr self) -> std::string"""
        return _ccsds_swig.softbittobit_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(softbittobit_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbittobit_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(softbittobit_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.softbittobit_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(softbittobit_sptr self) -> long"""
        return _ccsds_swig.softbittobit_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(softbittobit_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.softbittobit_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(softbittobit_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.softbittobit_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(softbittobit_sptr self) -> std::string"""
        return _ccsds_swig.softbittobit_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(softbittobit_sptr self, std::string name)"""
        return _ccsds_swig.softbittobit_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(softbittobit_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.softbittobit_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(softbittobit_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbittobit_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(softbittobit_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.softbittobit_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(softbittobit_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.softbittobit_sptr_message_subscribers(self, which_port)

softbittobit_sptr_swigregister = _ccsds_swig.softbittobit_sptr_swigregister
softbittobit_sptr_swigregister(softbittobit_sptr)


softbittobit_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
softbittobit = softbittobit.make;

class simple_bpsk_SNR_qf(object):
    """Proxy of C++ gr::ccsds::simple_bpsk_SNR_qf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(window_size):
        """make(unsigned long window_size) -> simple_bpsk_SNR_qf_sptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_make(window_size)

    make = staticmethod(make)

    def get_SNR_real(self):
        """get_SNR_real(simple_bpsk_SNR_qf self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_get_SNR_real(self)


    def get_SNR_imag(self):
        """get_SNR_imag(simple_bpsk_SNR_qf self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_get_SNR_imag(self)


    def get_SNR_magn(self):
        """get_SNR_magn(simple_bpsk_SNR_qf self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_get_SNR_magn(self)


    def get_window_size(self):
        """get_window_size(simple_bpsk_SNR_qf self) -> unsigned long"""
        return _ccsds_swig.simple_bpsk_SNR_qf_get_window_size(self)


    def set_window_size(self, arg2):
        """set_window_size(simple_bpsk_SNR_qf self, unsigned long arg2)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_set_window_size(self, arg2)

    __swig_destroy__ = _ccsds_swig.delete_simple_bpsk_SNR_qf
    __del__ = lambda self: None
simple_bpsk_SNR_qf_swigregister = _ccsds_swig.simple_bpsk_SNR_qf_swigregister
simple_bpsk_SNR_qf_swigregister(simple_bpsk_SNR_qf)

def simple_bpsk_SNR_qf_make(window_size):
    """simple_bpsk_SNR_qf_make(unsigned long window_size) -> simple_bpsk_SNR_qf_sptr"""
    return _ccsds_swig.simple_bpsk_SNR_qf_make(window_size)

class simple_bpsk_SNR_qf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::simple_bpsk_SNR_qf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::simple_bpsk_SNR_qf)> self) -> simple_bpsk_SNR_qf_sptr
        __init__(boost::shared_ptr<(gr::ccsds::simple_bpsk_SNR_qf)> self, simple_bpsk_SNR_qf p) -> simple_bpsk_SNR_qf_sptr
        """
        this = _ccsds_swig.new_simple_bpsk_SNR_qf_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(simple_bpsk_SNR_qf_sptr self) -> simple_bpsk_SNR_qf"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_simple_bpsk_SNR_qf_sptr
    __del__ = lambda self: None

    def make(self, window_size):
        """make(simple_bpsk_SNR_qf_sptr self, unsigned long window_size) -> simple_bpsk_SNR_qf_sptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_make(self, window_size)


    def get_SNR_real(self):
        """get_SNR_real(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_get_SNR_real(self)


    def get_SNR_imag(self):
        """get_SNR_imag(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_get_SNR_imag(self)


    def get_SNR_magn(self):
        """get_SNR_magn(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_get_SNR_magn(self)


    def get_window_size(self):
        """get_window_size(simple_bpsk_SNR_qf_sptr self) -> unsigned long"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_get_window_size(self)


    def set_window_size(self, arg2):
        """set_window_size(simple_bpsk_SNR_qf_sptr self, unsigned long arg2)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_window_size(self, arg2)


    def history(self):
        """history(simple_bpsk_SNR_qf_sptr self) -> unsigned int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(simple_bpsk_SNR_qf_sptr self, int which, int delay)
        declare_sample_delay(simple_bpsk_SNR_qf_sptr self, unsigned int delay)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(simple_bpsk_SNR_qf_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(simple_bpsk_SNR_qf_sptr self) -> double"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_relative_rate(self)


    def start(self):
        """start(simple_bpsk_SNR_qf_sptr self) -> bool"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_start(self)


    def stop(self):
        """stop(simple_bpsk_SNR_qf_sptr self) -> bool"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(simple_bpsk_SNR_qf_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(simple_bpsk_SNR_qf_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(simple_bpsk_SNR_qf_sptr self, int m)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(simple_bpsk_SNR_qf_sptr self)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(simple_bpsk_SNR_qf_sptr self) -> bool"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(simple_bpsk_SNR_qf_sptr self, int m)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(simple_bpsk_SNR_qf_sptr self, int i) -> long"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(simple_bpsk_SNR_qf_sptr self, long max_output_buffer)
        set_max_output_buffer(simple_bpsk_SNR_qf_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(simple_bpsk_SNR_qf_sptr self, int i) -> long"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(simple_bpsk_SNR_qf_sptr self, long min_output_buffer)
        set_min_output_buffer(simple_bpsk_SNR_qf_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_input_buffers_full(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_input_buffers_full_avg(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_input_buffers_full_var(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_output_buffers_full(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_output_buffers_full_avg(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(simple_bpsk_SNR_qf_sptr self, int which) -> float
        pc_output_buffers_full_var(simple_bpsk_SNR_qf_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(simple_bpsk_SNR_qf_sptr self) -> float"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(simple_bpsk_SNR_qf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(simple_bpsk_SNR_qf_sptr self)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(simple_bpsk_SNR_qf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(simple_bpsk_SNR_qf_sptr self) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(simple_bpsk_SNR_qf_sptr self, int priority) -> int"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(simple_bpsk_SNR_qf_sptr self) -> std::string"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(simple_bpsk_SNR_qf_sptr self) -> std::string"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(simple_bpsk_SNR_qf_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(simple_bpsk_SNR_qf_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(simple_bpsk_SNR_qf_sptr self) -> long"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(simple_bpsk_SNR_qf_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(simple_bpsk_SNR_qf_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(simple_bpsk_SNR_qf_sptr self) -> std::string"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(simple_bpsk_SNR_qf_sptr self, std::string name)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(simple_bpsk_SNR_qf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(simple_bpsk_SNR_qf_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(simple_bpsk_SNR_qf_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(simple_bpsk_SNR_qf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.simple_bpsk_SNR_qf_sptr_message_subscribers(self, which_port)

simple_bpsk_SNR_qf_sptr_swigregister = _ccsds_swig.simple_bpsk_SNR_qf_sptr_swigregister
simple_bpsk_SNR_qf_sptr_swigregister(simple_bpsk_SNR_qf_sptr)


simple_bpsk_SNR_qf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
simple_bpsk_SNR_qf = simple_bpsk_SNR_qf.make;

class output_counter_cc(object):
    """Proxy of C++ gr::ccsds::output_counter_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(block_len_sym):
        """make(uint64_t block_len_sym) -> output_counter_cc_sptr"""
        return _ccsds_swig.output_counter_cc_make(block_len_sym)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_output_counter_cc
    __del__ = lambda self: None
output_counter_cc_swigregister = _ccsds_swig.output_counter_cc_swigregister
output_counter_cc_swigregister(output_counter_cc)

def output_counter_cc_make(block_len_sym):
    """output_counter_cc_make(uint64_t block_len_sym) -> output_counter_cc_sptr"""
    return _ccsds_swig.output_counter_cc_make(block_len_sym)

class output_counter_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::output_counter_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::output_counter_cc)> self) -> output_counter_cc_sptr
        __init__(boost::shared_ptr<(gr::ccsds::output_counter_cc)> self, output_counter_cc p) -> output_counter_cc_sptr
        """
        this = _ccsds_swig.new_output_counter_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(output_counter_cc_sptr self) -> output_counter_cc"""
        return _ccsds_swig.output_counter_cc_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_output_counter_cc_sptr
    __del__ = lambda self: None

    def make(self, block_len_sym):
        """make(output_counter_cc_sptr self, uint64_t block_len_sym) -> output_counter_cc_sptr"""
        return _ccsds_swig.output_counter_cc_sptr_make(self, block_len_sym)


    def history(self):
        """history(output_counter_cc_sptr self) -> unsigned int"""
        return _ccsds_swig.output_counter_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(output_counter_cc_sptr self, int which, int delay)
        declare_sample_delay(output_counter_cc_sptr self, unsigned int delay)
        """
        return _ccsds_swig.output_counter_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(output_counter_cc_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.output_counter_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(output_counter_cc_sptr self) -> int"""
        return _ccsds_swig.output_counter_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(output_counter_cc_sptr self) -> double"""
        return _ccsds_swig.output_counter_cc_sptr_relative_rate(self)


    def start(self):
        """start(output_counter_cc_sptr self) -> bool"""
        return _ccsds_swig.output_counter_cc_sptr_start(self)


    def stop(self):
        """stop(output_counter_cc_sptr self) -> bool"""
        return _ccsds_swig.output_counter_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(output_counter_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.output_counter_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(output_counter_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.output_counter_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(output_counter_cc_sptr self) -> int"""
        return _ccsds_swig.output_counter_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(output_counter_cc_sptr self, int m)"""
        return _ccsds_swig.output_counter_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(output_counter_cc_sptr self)"""
        return _ccsds_swig.output_counter_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(output_counter_cc_sptr self) -> bool"""
        return _ccsds_swig.output_counter_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(output_counter_cc_sptr self, int m)"""
        return _ccsds_swig.output_counter_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(output_counter_cc_sptr self) -> int"""
        return _ccsds_swig.output_counter_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(output_counter_cc_sptr self, int i) -> long"""
        return _ccsds_swig.output_counter_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(output_counter_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(output_counter_cc_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.output_counter_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(output_counter_cc_sptr self, int i) -> long"""
        return _ccsds_swig.output_counter_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(output_counter_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(output_counter_cc_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.output_counter_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(output_counter_cc_sptr self, int which) -> float
        pc_input_buffers_full(output_counter_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.output_counter_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(output_counter_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(output_counter_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.output_counter_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(output_counter_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(output_counter_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.output_counter_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(output_counter_cc_sptr self, int which) -> float
        pc_output_buffers_full(output_counter_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.output_counter_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(output_counter_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(output_counter_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.output_counter_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(output_counter_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(output_counter_cc_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.output_counter_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(output_counter_cc_sptr self) -> float"""
        return _ccsds_swig.output_counter_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(output_counter_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.output_counter_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(output_counter_cc_sptr self)"""
        return _ccsds_swig.output_counter_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(output_counter_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.output_counter_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(output_counter_cc_sptr self) -> int"""
        return _ccsds_swig.output_counter_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(output_counter_cc_sptr self) -> int"""
        return _ccsds_swig.output_counter_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(output_counter_cc_sptr self, int priority) -> int"""
        return _ccsds_swig.output_counter_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(output_counter_cc_sptr self) -> std::string"""
        return _ccsds_swig.output_counter_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(output_counter_cc_sptr self) -> std::string"""
        return _ccsds_swig.output_counter_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(output_counter_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.output_counter_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(output_counter_cc_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.output_counter_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(output_counter_cc_sptr self) -> long"""
        return _ccsds_swig.output_counter_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(output_counter_cc_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.output_counter_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(output_counter_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.output_counter_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(output_counter_cc_sptr self) -> std::string"""
        return _ccsds_swig.output_counter_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(output_counter_cc_sptr self, std::string name)"""
        return _ccsds_swig.output_counter_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(output_counter_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.output_counter_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(output_counter_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.output_counter_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(output_counter_cc_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.output_counter_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(output_counter_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.output_counter_cc_sptr_message_subscribers(self, which_port)

output_counter_cc_sptr_swigregister = _ccsds_swig.output_counter_cc_sptr_swigregister
output_counter_cc_sptr_swigregister(output_counter_cc_sptr)


output_counter_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
output_counter_cc = output_counter_cc.make;

class udp_source_rate_idle_b(object):
    """Proxy of C++ gr::ccsds::udp_source_rate_idle_b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(host_recv, port_recv, host_ctl, port_ctl, MAX_FRAME_LEN_BYTES, BLOCK_LEN_BYTES, NUM_BLOCKS_FLOATING, idle_pattern):
        """make(std::string const & host_recv, int port_recv, std::string const & host_ctl, int port_ctl, size_t const MAX_FRAME_LEN_BYTES, size_t const BLOCK_LEN_BYTES, size_t const NUM_BLOCKS_FLOATING, std::vector< uint8_t,std::allocator< uint8_t > > idle_pattern) -> udp_source_rate_idle_b_sptr"""
        return _ccsds_swig.udp_source_rate_idle_b_make(host_recv, port_recv, host_ctl, port_ctl, MAX_FRAME_LEN_BYTES, BLOCK_LEN_BYTES, NUM_BLOCKS_FLOATING, idle_pattern)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_udp_source_rate_idle_b
    __del__ = lambda self: None
udp_source_rate_idle_b_swigregister = _ccsds_swig.udp_source_rate_idle_b_swigregister
udp_source_rate_idle_b_swigregister(udp_source_rate_idle_b)

def udp_source_rate_idle_b_make(host_recv, port_recv, host_ctl, port_ctl, MAX_FRAME_LEN_BYTES, BLOCK_LEN_BYTES, NUM_BLOCKS_FLOATING, idle_pattern):
    """udp_source_rate_idle_b_make(std::string const & host_recv, int port_recv, std::string const & host_ctl, int port_ctl, size_t const MAX_FRAME_LEN_BYTES, size_t const BLOCK_LEN_BYTES, size_t const NUM_BLOCKS_FLOATING, std::vector< uint8_t,std::allocator< uint8_t > > idle_pattern) -> udp_source_rate_idle_b_sptr"""
    return _ccsds_swig.udp_source_rate_idle_b_make(host_recv, port_recv, host_ctl, port_ctl, MAX_FRAME_LEN_BYTES, BLOCK_LEN_BYTES, NUM_BLOCKS_FLOATING, idle_pattern)

class udp_source_rate_idle_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::udp_source_rate_idle_b)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::udp_source_rate_idle_b)> self) -> udp_source_rate_idle_b_sptr
        __init__(boost::shared_ptr<(gr::ccsds::udp_source_rate_idle_b)> self, udp_source_rate_idle_b p) -> udp_source_rate_idle_b_sptr
        """
        this = _ccsds_swig.new_udp_source_rate_idle_b_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(udp_source_rate_idle_b_sptr self) -> udp_source_rate_idle_b"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_udp_source_rate_idle_b_sptr
    __del__ = lambda self: None

    def make(self, host_recv, port_recv, host_ctl, port_ctl, MAX_FRAME_LEN_BYTES, BLOCK_LEN_BYTES, NUM_BLOCKS_FLOATING, idle_pattern):
        """make(udp_source_rate_idle_b_sptr self, std::string const & host_recv, int port_recv, std::string const & host_ctl, int port_ctl, size_t const MAX_FRAME_LEN_BYTES, size_t const BLOCK_LEN_BYTES, size_t const NUM_BLOCKS_FLOATING, std::vector< uint8_t,std::allocator< uint8_t > > idle_pattern) -> udp_source_rate_idle_b_sptr"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_make(self, host_recv, port_recv, host_ctl, port_ctl, MAX_FRAME_LEN_BYTES, BLOCK_LEN_BYTES, NUM_BLOCKS_FLOATING, idle_pattern)


    def history(self):
        """history(udp_source_rate_idle_b_sptr self) -> unsigned int"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(udp_source_rate_idle_b_sptr self, int which, int delay)
        declare_sample_delay(udp_source_rate_idle_b_sptr self, unsigned int delay)
        """
        return _ccsds_swig.udp_source_rate_idle_b_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(udp_source_rate_idle_b_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(udp_source_rate_idle_b_sptr self) -> int"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(udp_source_rate_idle_b_sptr self) -> double"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_relative_rate(self)


    def start(self):
        """start(udp_source_rate_idle_b_sptr self) -> bool"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_start(self)


    def stop(self):
        """stop(udp_source_rate_idle_b_sptr self) -> bool"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(udp_source_rate_idle_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(udp_source_rate_idle_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(udp_source_rate_idle_b_sptr self) -> int"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(udp_source_rate_idle_b_sptr self, int m)"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(udp_source_rate_idle_b_sptr self)"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(udp_source_rate_idle_b_sptr self) -> bool"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(udp_source_rate_idle_b_sptr self, int m)"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(udp_source_rate_idle_b_sptr self) -> int"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(udp_source_rate_idle_b_sptr self, int i) -> long"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(udp_source_rate_idle_b_sptr self, long max_output_buffer)
        set_max_output_buffer(udp_source_rate_idle_b_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.udp_source_rate_idle_b_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(udp_source_rate_idle_b_sptr self, int i) -> long"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(udp_source_rate_idle_b_sptr self, long min_output_buffer)
        set_min_output_buffer(udp_source_rate_idle_b_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.udp_source_rate_idle_b_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(udp_source_rate_idle_b_sptr self, int which) -> float
        pc_input_buffers_full(udp_source_rate_idle_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(udp_source_rate_idle_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(udp_source_rate_idle_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(udp_source_rate_idle_b_sptr self, int which) -> float
        pc_input_buffers_full_var(udp_source_rate_idle_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(udp_source_rate_idle_b_sptr self, int which) -> float
        pc_output_buffers_full(udp_source_rate_idle_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(udp_source_rate_idle_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(udp_source_rate_idle_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(udp_source_rate_idle_b_sptr self, int which) -> float
        pc_output_buffers_full_var(udp_source_rate_idle_b_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(udp_source_rate_idle_b_sptr self) -> float"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(udp_source_rate_idle_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(udp_source_rate_idle_b_sptr self)"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(udp_source_rate_idle_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(udp_source_rate_idle_b_sptr self) -> int"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(udp_source_rate_idle_b_sptr self) -> int"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(udp_source_rate_idle_b_sptr self, int priority) -> int"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(udp_source_rate_idle_b_sptr self) -> std::string"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_name(self)


    def symbol_name(self):
        """symbol_name(udp_source_rate_idle_b_sptr self) -> std::string"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(udp_source_rate_idle_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(udp_source_rate_idle_b_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(udp_source_rate_idle_b_sptr self) -> long"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(udp_source_rate_idle_b_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(udp_source_rate_idle_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(udp_source_rate_idle_b_sptr self) -> std::string"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(udp_source_rate_idle_b_sptr self, std::string name)"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(udp_source_rate_idle_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(udp_source_rate_idle_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(udp_source_rate_idle_b_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(udp_source_rate_idle_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.udp_source_rate_idle_b_sptr_message_subscribers(self, which_port)

udp_source_rate_idle_b_sptr_swigregister = _ccsds_swig.udp_source_rate_idle_b_sptr_swigregister
udp_source_rate_idle_b_sptr_swigregister(udp_source_rate_idle_b_sptr)


udp_source_rate_idle_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
udp_source_rate_idle_b = udp_source_rate_idle_b.make;

class ldpc_encoder(object):
    """Proxy of C++ gr::ccsds::ldpc_encoder class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(generator_file, systype, puncttype, num_punct, punct_pos):
        """make(char const * generator_file, gr::ccsds::sys_t systype, gr::ccsds::punct_t puncttype, uint64_t num_punct, gr_vsize_t punct_pos) -> ldpc_encoder_sptr"""
        return _ccsds_swig.ldpc_encoder_make(generator_file, systype, puncttype, num_punct, punct_pos)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_ldpc_encoder
    __del__ = lambda self: None
ldpc_encoder_swigregister = _ccsds_swig.ldpc_encoder_swigregister
ldpc_encoder_swigregister(ldpc_encoder)

def ldpc_encoder_make(generator_file, systype, puncttype, num_punct, punct_pos):
    """ldpc_encoder_make(char const * generator_file, gr::ccsds::sys_t systype, gr::ccsds::punct_t puncttype, uint64_t num_punct, gr_vsize_t punct_pos) -> ldpc_encoder_sptr"""
    return _ccsds_swig.ldpc_encoder_make(generator_file, systype, puncttype, num_punct, punct_pos)

class ldpc_encoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::ldpc_encoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::ldpc_encoder)> self) -> ldpc_encoder_sptr
        __init__(boost::shared_ptr<(gr::ccsds::ldpc_encoder)> self, ldpc_encoder p) -> ldpc_encoder_sptr
        """
        this = _ccsds_swig.new_ldpc_encoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ldpc_encoder_sptr self) -> ldpc_encoder"""
        return _ccsds_swig.ldpc_encoder_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_ldpc_encoder_sptr
    __del__ = lambda self: None

    def make(self, generator_file, systype, puncttype, num_punct, punct_pos):
        """make(ldpc_encoder_sptr self, char const * generator_file, gr::ccsds::sys_t systype, gr::ccsds::punct_t puncttype, uint64_t num_punct, gr_vsize_t punct_pos) -> ldpc_encoder_sptr"""
        return _ccsds_swig.ldpc_encoder_sptr_make(self, generator_file, systype, puncttype, num_punct, punct_pos)


    def history(self):
        """history(ldpc_encoder_sptr self) -> unsigned int"""
        return _ccsds_swig.ldpc_encoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ldpc_encoder_sptr self, int which, int delay)
        declare_sample_delay(ldpc_encoder_sptr self, unsigned int delay)
        """
        return _ccsds_swig.ldpc_encoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ldpc_encoder_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.ldpc_encoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ldpc_encoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_encoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ldpc_encoder_sptr self) -> double"""
        return _ccsds_swig.ldpc_encoder_sptr_relative_rate(self)


    def start(self):
        """start(ldpc_encoder_sptr self) -> bool"""
        return _ccsds_swig.ldpc_encoder_sptr_start(self)


    def stop(self):
        """stop(ldpc_encoder_sptr self) -> bool"""
        return _ccsds_swig.ldpc_encoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ldpc_encoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.ldpc_encoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ldpc_encoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.ldpc_encoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ldpc_encoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_encoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ldpc_encoder_sptr self, int m)"""
        return _ccsds_swig.ldpc_encoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ldpc_encoder_sptr self)"""
        return _ccsds_swig.ldpc_encoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ldpc_encoder_sptr self) -> bool"""
        return _ccsds_swig.ldpc_encoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ldpc_encoder_sptr self, int m)"""
        return _ccsds_swig.ldpc_encoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ldpc_encoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_encoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ldpc_encoder_sptr self, int i) -> long"""
        return _ccsds_swig.ldpc_encoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ldpc_encoder_sptr self, long max_output_buffer)
        set_max_output_buffer(ldpc_encoder_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.ldpc_encoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ldpc_encoder_sptr self, int i) -> long"""
        return _ccsds_swig.ldpc_encoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ldpc_encoder_sptr self, long min_output_buffer)
        set_min_output_buffer(ldpc_encoder_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.ldpc_encoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ldpc_encoder_sptr self, int which) -> float
        pc_input_buffers_full(ldpc_encoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_encoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ldpc_encoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(ldpc_encoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_encoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ldpc_encoder_sptr self, int which) -> float
        pc_input_buffers_full_var(ldpc_encoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_encoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ldpc_encoder_sptr self, int which) -> float
        pc_output_buffers_full(ldpc_encoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_encoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ldpc_encoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(ldpc_encoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_encoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ldpc_encoder_sptr self, int which) -> float
        pc_output_buffers_full_var(ldpc_encoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_encoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ldpc_encoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_encoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ldpc_encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.ldpc_encoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ldpc_encoder_sptr self)"""
        return _ccsds_swig.ldpc_encoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ldpc_encoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.ldpc_encoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ldpc_encoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_encoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ldpc_encoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_encoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ldpc_encoder_sptr self, int priority) -> int"""
        return _ccsds_swig.ldpc_encoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ldpc_encoder_sptr self) -> std::string"""
        return _ccsds_swig.ldpc_encoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ldpc_encoder_sptr self) -> std::string"""
        return _ccsds_swig.ldpc_encoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ldpc_encoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ldpc_encoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ldpc_encoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ldpc_encoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ldpc_encoder_sptr self) -> long"""
        return _ccsds_swig.ldpc_encoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ldpc_encoder_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.ldpc_encoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ldpc_encoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.ldpc_encoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ldpc_encoder_sptr self) -> std::string"""
        return _ccsds_swig.ldpc_encoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ldpc_encoder_sptr self, std::string name)"""
        return _ccsds_swig.ldpc_encoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ldpc_encoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.ldpc_encoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ldpc_encoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ldpc_encoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ldpc_encoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ldpc_encoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ldpc_encoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.ldpc_encoder_sptr_message_subscribers(self, which_port)

ldpc_encoder_sptr_swigregister = _ccsds_swig.ldpc_encoder_sptr_swigregister
ldpc_encoder_sptr_swigregister(ldpc_encoder_sptr)


ldpc_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ldpc_encoder = ldpc_encoder.make;

class ldpc_decoder(object):
    """Proxy of C++ gr::ccsds::ldpc_decoder class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(parity_file, systype, puncttype, num_punct, punct_pos):
        """make(char const * parity_file, gr::ccsds::sys_t systype, gr::ccsds::punct_t puncttype, uint64_t num_punct, gr_vsize_t punct_pos) -> ldpc_decoder_sptr"""
        return _ccsds_swig.ldpc_decoder_make(parity_file, systype, puncttype, num_punct, punct_pos)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_ldpc_decoder
    __del__ = lambda self: None
ldpc_decoder_swigregister = _ccsds_swig.ldpc_decoder_swigregister
ldpc_decoder_swigregister(ldpc_decoder)

def ldpc_decoder_make(parity_file, systype, puncttype, num_punct, punct_pos):
    """ldpc_decoder_make(char const * parity_file, gr::ccsds::sys_t systype, gr::ccsds::punct_t puncttype, uint64_t num_punct, gr_vsize_t punct_pos) -> ldpc_decoder_sptr"""
    return _ccsds_swig.ldpc_decoder_make(parity_file, systype, puncttype, num_punct, punct_pos)

class ldpc_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::ldpc_decoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::ldpc_decoder)> self) -> ldpc_decoder_sptr
        __init__(boost::shared_ptr<(gr::ccsds::ldpc_decoder)> self, ldpc_decoder p) -> ldpc_decoder_sptr
        """
        this = _ccsds_swig.new_ldpc_decoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ldpc_decoder_sptr self) -> ldpc_decoder"""
        return _ccsds_swig.ldpc_decoder_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_ldpc_decoder_sptr
    __del__ = lambda self: None

    def make(self, parity_file, systype, puncttype, num_punct, punct_pos):
        """make(ldpc_decoder_sptr self, char const * parity_file, gr::ccsds::sys_t systype, gr::ccsds::punct_t puncttype, uint64_t num_punct, gr_vsize_t punct_pos) -> ldpc_decoder_sptr"""
        return _ccsds_swig.ldpc_decoder_sptr_make(self, parity_file, systype, puncttype, num_punct, punct_pos)


    def history(self):
        """history(ldpc_decoder_sptr self) -> unsigned int"""
        return _ccsds_swig.ldpc_decoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ldpc_decoder_sptr self, int which, int delay)
        declare_sample_delay(ldpc_decoder_sptr self, unsigned int delay)
        """
        return _ccsds_swig.ldpc_decoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ldpc_decoder_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.ldpc_decoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ldpc_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_decoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ldpc_decoder_sptr self) -> double"""
        return _ccsds_swig.ldpc_decoder_sptr_relative_rate(self)


    def start(self):
        """start(ldpc_decoder_sptr self) -> bool"""
        return _ccsds_swig.ldpc_decoder_sptr_start(self)


    def stop(self):
        """stop(ldpc_decoder_sptr self) -> bool"""
        return _ccsds_swig.ldpc_decoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ldpc_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.ldpc_decoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ldpc_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.ldpc_decoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ldpc_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_decoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ldpc_decoder_sptr self, int m)"""
        return _ccsds_swig.ldpc_decoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ldpc_decoder_sptr self)"""
        return _ccsds_swig.ldpc_decoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ldpc_decoder_sptr self) -> bool"""
        return _ccsds_swig.ldpc_decoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ldpc_decoder_sptr self, int m)"""
        return _ccsds_swig.ldpc_decoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ldpc_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_decoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ldpc_decoder_sptr self, int i) -> long"""
        return _ccsds_swig.ldpc_decoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ldpc_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(ldpc_decoder_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.ldpc_decoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ldpc_decoder_sptr self, int i) -> long"""
        return _ccsds_swig.ldpc_decoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ldpc_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(ldpc_decoder_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.ldpc_decoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ldpc_decoder_sptr self, int which) -> float
        pc_input_buffers_full(ldpc_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_decoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ldpc_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(ldpc_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_decoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ldpc_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(ldpc_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_decoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ldpc_decoder_sptr self, int which) -> float
        pc_output_buffers_full(ldpc_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_decoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ldpc_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(ldpc_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_decoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ldpc_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(ldpc_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_decoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ldpc_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_decoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ldpc_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.ldpc_decoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ldpc_decoder_sptr self)"""
        return _ccsds_swig.ldpc_decoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ldpc_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.ldpc_decoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ldpc_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_decoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ldpc_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_decoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ldpc_decoder_sptr self, int priority) -> int"""
        return _ccsds_swig.ldpc_decoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ldpc_decoder_sptr self) -> std::string"""
        return _ccsds_swig.ldpc_decoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ldpc_decoder_sptr self) -> std::string"""
        return _ccsds_swig.ldpc_decoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ldpc_decoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ldpc_decoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ldpc_decoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ldpc_decoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ldpc_decoder_sptr self) -> long"""
        return _ccsds_swig.ldpc_decoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ldpc_decoder_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.ldpc_decoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ldpc_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.ldpc_decoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ldpc_decoder_sptr self) -> std::string"""
        return _ccsds_swig.ldpc_decoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ldpc_decoder_sptr self, std::string name)"""
        return _ccsds_swig.ldpc_decoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ldpc_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.ldpc_decoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ldpc_decoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ldpc_decoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ldpc_decoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ldpc_decoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ldpc_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.ldpc_decoder_sptr_message_subscribers(self, which_port)

ldpc_decoder_sptr_swigregister = _ccsds_swig.ldpc_decoder_sptr_swigregister
ldpc_decoder_sptr_swigregister(ldpc_decoder_sptr)


ldpc_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ldpc_decoder = ldpc_decoder.make;

class ldpc_parallel_decoder(object):
    """Proxy of C++ gr::ccsds::ldpc_parallel_decoder class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(parity_file, systype, puncttype, num_punct, punct_pos, NUM_PARALLEL):
        """make(char const * parity_file, gr::ccsds::sys_t systype, gr::ccsds::punct_t puncttype, uint64_t num_punct, gr_vsize_t punct_pos, uint8_t const NUM_PARALLEL) -> ldpc_parallel_decoder_sptr"""
        return _ccsds_swig.ldpc_parallel_decoder_make(parity_file, systype, puncttype, num_punct, punct_pos, NUM_PARALLEL)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_ldpc_parallel_decoder
    __del__ = lambda self: None
ldpc_parallel_decoder_swigregister = _ccsds_swig.ldpc_parallel_decoder_swigregister
ldpc_parallel_decoder_swigregister(ldpc_parallel_decoder)

def ldpc_parallel_decoder_make(parity_file, systype, puncttype, num_punct, punct_pos, NUM_PARALLEL):
    """ldpc_parallel_decoder_make(char const * parity_file, gr::ccsds::sys_t systype, gr::ccsds::punct_t puncttype, uint64_t num_punct, gr_vsize_t punct_pos, uint8_t const NUM_PARALLEL) -> ldpc_parallel_decoder_sptr"""
    return _ccsds_swig.ldpc_parallel_decoder_make(parity_file, systype, puncttype, num_punct, punct_pos, NUM_PARALLEL)

class ldpc_parallel_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::ldpc_parallel_decoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::ldpc_parallel_decoder)> self) -> ldpc_parallel_decoder_sptr
        __init__(boost::shared_ptr<(gr::ccsds::ldpc_parallel_decoder)> self, ldpc_parallel_decoder p) -> ldpc_parallel_decoder_sptr
        """
        this = _ccsds_swig.new_ldpc_parallel_decoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ldpc_parallel_decoder_sptr self) -> ldpc_parallel_decoder"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_ldpc_parallel_decoder_sptr
    __del__ = lambda self: None

    def make(self, parity_file, systype, puncttype, num_punct, punct_pos, NUM_PARALLEL):
        """make(ldpc_parallel_decoder_sptr self, char const * parity_file, gr::ccsds::sys_t systype, gr::ccsds::punct_t puncttype, uint64_t num_punct, gr_vsize_t punct_pos, uint8_t const NUM_PARALLEL) -> ldpc_parallel_decoder_sptr"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_make(self, parity_file, systype, puncttype, num_punct, punct_pos, NUM_PARALLEL)


    def history(self):
        """history(ldpc_parallel_decoder_sptr self) -> unsigned int"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ldpc_parallel_decoder_sptr self, int which, int delay)
        declare_sample_delay(ldpc_parallel_decoder_sptr self, unsigned int delay)
        """
        return _ccsds_swig.ldpc_parallel_decoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ldpc_parallel_decoder_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ldpc_parallel_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ldpc_parallel_decoder_sptr self) -> double"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_relative_rate(self)


    def start(self):
        """start(ldpc_parallel_decoder_sptr self) -> bool"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_start(self)


    def stop(self):
        """stop(ldpc_parallel_decoder_sptr self) -> bool"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ldpc_parallel_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ldpc_parallel_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ldpc_parallel_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ldpc_parallel_decoder_sptr self, int m)"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ldpc_parallel_decoder_sptr self)"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ldpc_parallel_decoder_sptr self) -> bool"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ldpc_parallel_decoder_sptr self, int m)"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ldpc_parallel_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ldpc_parallel_decoder_sptr self, int i) -> long"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ldpc_parallel_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(ldpc_parallel_decoder_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.ldpc_parallel_decoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ldpc_parallel_decoder_sptr self, int i) -> long"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ldpc_parallel_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(ldpc_parallel_decoder_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.ldpc_parallel_decoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ldpc_parallel_decoder_sptr self, int which) -> float
        pc_input_buffers_full(ldpc_parallel_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ldpc_parallel_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(ldpc_parallel_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ldpc_parallel_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(ldpc_parallel_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ldpc_parallel_decoder_sptr self, int which) -> float
        pc_output_buffers_full(ldpc_parallel_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ldpc_parallel_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(ldpc_parallel_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ldpc_parallel_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(ldpc_parallel_decoder_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ldpc_parallel_decoder_sptr self) -> float"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ldpc_parallel_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ldpc_parallel_decoder_sptr self)"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ldpc_parallel_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ldpc_parallel_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ldpc_parallel_decoder_sptr self) -> int"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ldpc_parallel_decoder_sptr self, int priority) -> int"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ldpc_parallel_decoder_sptr self) -> std::string"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ldpc_parallel_decoder_sptr self) -> std::string"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ldpc_parallel_decoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ldpc_parallel_decoder_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ldpc_parallel_decoder_sptr self) -> long"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ldpc_parallel_decoder_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ldpc_parallel_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ldpc_parallel_decoder_sptr self) -> std::string"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ldpc_parallel_decoder_sptr self, std::string name)"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ldpc_parallel_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ldpc_parallel_decoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ldpc_parallel_decoder_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ldpc_parallel_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.ldpc_parallel_decoder_sptr_message_subscribers(self, which_port)

ldpc_parallel_decoder_sptr_swigregister = _ccsds_swig.ldpc_parallel_decoder_sptr_swigregister
ldpc_parallel_decoder_sptr_swigregister(ldpc_parallel_decoder_sptr)


ldpc_parallel_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ldpc_parallel_decoder = ldpc_parallel_decoder.make;

class message_info(object):
    """Proxy of C++ gr::ccsds::message_info class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SILENT = _ccsds_swig.message_info_SILENT
    COMPACT = _ccsds_swig.message_info_COMPACT
    FULL = _ccsds_swig.message_info_FULL

    def make(prefix, mode):
        """make(std::string prefix, gr::ccsds::message_info::mode_t mode) -> message_info_sptr"""
        return _ccsds_swig.message_info_make(prefix, mode)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_message_info
    __del__ = lambda self: None
message_info_swigregister = _ccsds_swig.message_info_swigregister
message_info_swigregister(message_info)

def message_info_make(prefix, mode):
    """message_info_make(std::string prefix, gr::ccsds::message_info::mode_t mode) -> message_info_sptr"""
    return _ccsds_swig.message_info_make(prefix, mode)

class message_info_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::message_info)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::message_info)> self) -> message_info_sptr
        __init__(boost::shared_ptr<(gr::ccsds::message_info)> self, message_info p) -> message_info_sptr
        """
        this = _ccsds_swig.new_message_info_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_info_sptr self) -> message_info"""
        return _ccsds_swig.message_info_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_message_info_sptr
    __del__ = lambda self: None

    def make(self, prefix, mode):
        """make(message_info_sptr self, std::string prefix, gr::ccsds::message_info::mode_t mode) -> message_info_sptr"""
        return _ccsds_swig.message_info_sptr_make(self, prefix, mode)


    def history(self):
        """history(message_info_sptr self) -> unsigned int"""
        return _ccsds_swig.message_info_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_info_sptr self, int which, int delay)
        declare_sample_delay(message_info_sptr self, unsigned int delay)
        """
        return _ccsds_swig.message_info_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_info_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.message_info_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_info_sptr self) -> int"""
        return _ccsds_swig.message_info_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_info_sptr self) -> double"""
        return _ccsds_swig.message_info_sptr_relative_rate(self)


    def start(self):
        """start(message_info_sptr self) -> bool"""
        return _ccsds_swig.message_info_sptr_start(self)


    def stop(self):
        """stop(message_info_sptr self) -> bool"""
        return _ccsds_swig.message_info_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_info_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.message_info_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_info_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.message_info_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_info_sptr self) -> int"""
        return _ccsds_swig.message_info_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_info_sptr self, int m)"""
        return _ccsds_swig.message_info_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_info_sptr self)"""
        return _ccsds_swig.message_info_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_info_sptr self) -> bool"""
        return _ccsds_swig.message_info_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_info_sptr self, int m)"""
        return _ccsds_swig.message_info_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_info_sptr self) -> int"""
        return _ccsds_swig.message_info_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_info_sptr self, int i) -> long"""
        return _ccsds_swig.message_info_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_info_sptr self, long max_output_buffer)
        set_max_output_buffer(message_info_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.message_info_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_info_sptr self, int i) -> long"""
        return _ccsds_swig.message_info_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_info_sptr self, long min_output_buffer)
        set_min_output_buffer(message_info_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.message_info_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_info_sptr self, int which) -> float
        pc_input_buffers_full(message_info_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.message_info_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_info_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_info_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.message_info_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_info_sptr self, int which) -> float
        pc_input_buffers_full_var(message_info_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.message_info_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_info_sptr self, int which) -> float
        pc_output_buffers_full(message_info_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.message_info_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_info_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_info_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.message_info_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_info_sptr self, int which) -> float
        pc_output_buffers_full_var(message_info_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.message_info_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_info_sptr self) -> float"""
        return _ccsds_swig.message_info_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_info_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.message_info_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_info_sptr self)"""
        return _ccsds_swig.message_info_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_info_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.message_info_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_info_sptr self) -> int"""
        return _ccsds_swig.message_info_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_info_sptr self) -> int"""
        return _ccsds_swig.message_info_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_info_sptr self, int priority) -> int"""
        return _ccsds_swig.message_info_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_info_sptr self) -> std::string"""
        return _ccsds_swig.message_info_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_info_sptr self) -> std::string"""
        return _ccsds_swig.message_info_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_info_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.message_info_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_info_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.message_info_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_info_sptr self) -> long"""
        return _ccsds_swig.message_info_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_info_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.message_info_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_info_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.message_info_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_info_sptr self) -> std::string"""
        return _ccsds_swig.message_info_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_info_sptr self, std::string name)"""
        return _ccsds_swig.message_info_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_info_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.message_info_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_info_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.message_info_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_info_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.message_info_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_info_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.message_info_sptr_message_subscribers(self, which_port)

message_info_sptr_swigregister = _ccsds_swig.message_info_sptr_swigregister
message_info_sptr_swigregister(message_info_sptr)


message_info_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_info = message_info.make;

class soft_to_hard_message(object):
    """Proxy of C++ gr::ccsds::soft_to_hard_message class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> soft_to_hard_message_sptr"""
        return _ccsds_swig.soft_to_hard_message_make()

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_soft_to_hard_message
    __del__ = lambda self: None
soft_to_hard_message_swigregister = _ccsds_swig.soft_to_hard_message_swigregister
soft_to_hard_message_swigregister(soft_to_hard_message)

def soft_to_hard_message_make():
    """soft_to_hard_message_make() -> soft_to_hard_message_sptr"""
    return _ccsds_swig.soft_to_hard_message_make()

class soft_to_hard_message_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::soft_to_hard_message)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::soft_to_hard_message)> self) -> soft_to_hard_message_sptr
        __init__(boost::shared_ptr<(gr::ccsds::soft_to_hard_message)> self, soft_to_hard_message p) -> soft_to_hard_message_sptr
        """
        this = _ccsds_swig.new_soft_to_hard_message_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(soft_to_hard_message_sptr self) -> soft_to_hard_message"""
        return _ccsds_swig.soft_to_hard_message_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_soft_to_hard_message_sptr
    __del__ = lambda self: None

    def make(self):
        """make(soft_to_hard_message_sptr self) -> soft_to_hard_message_sptr"""
        return _ccsds_swig.soft_to_hard_message_sptr_make(self)


    def history(self):
        """history(soft_to_hard_message_sptr self) -> unsigned int"""
        return _ccsds_swig.soft_to_hard_message_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(soft_to_hard_message_sptr self, int which, int delay)
        declare_sample_delay(soft_to_hard_message_sptr self, unsigned int delay)
        """
        return _ccsds_swig.soft_to_hard_message_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(soft_to_hard_message_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.soft_to_hard_message_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(soft_to_hard_message_sptr self) -> int"""
        return _ccsds_swig.soft_to_hard_message_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(soft_to_hard_message_sptr self) -> double"""
        return _ccsds_swig.soft_to_hard_message_sptr_relative_rate(self)


    def start(self):
        """start(soft_to_hard_message_sptr self) -> bool"""
        return _ccsds_swig.soft_to_hard_message_sptr_start(self)


    def stop(self):
        """stop(soft_to_hard_message_sptr self) -> bool"""
        return _ccsds_swig.soft_to_hard_message_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(soft_to_hard_message_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.soft_to_hard_message_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(soft_to_hard_message_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.soft_to_hard_message_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(soft_to_hard_message_sptr self) -> int"""
        return _ccsds_swig.soft_to_hard_message_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(soft_to_hard_message_sptr self, int m)"""
        return _ccsds_swig.soft_to_hard_message_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(soft_to_hard_message_sptr self)"""
        return _ccsds_swig.soft_to_hard_message_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(soft_to_hard_message_sptr self) -> bool"""
        return _ccsds_swig.soft_to_hard_message_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(soft_to_hard_message_sptr self, int m)"""
        return _ccsds_swig.soft_to_hard_message_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(soft_to_hard_message_sptr self) -> int"""
        return _ccsds_swig.soft_to_hard_message_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(soft_to_hard_message_sptr self, int i) -> long"""
        return _ccsds_swig.soft_to_hard_message_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(soft_to_hard_message_sptr self, long max_output_buffer)
        set_max_output_buffer(soft_to_hard_message_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.soft_to_hard_message_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(soft_to_hard_message_sptr self, int i) -> long"""
        return _ccsds_swig.soft_to_hard_message_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(soft_to_hard_message_sptr self, long min_output_buffer)
        set_min_output_buffer(soft_to_hard_message_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.soft_to_hard_message_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(soft_to_hard_message_sptr self, int which) -> float
        pc_input_buffers_full(soft_to_hard_message_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.soft_to_hard_message_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(soft_to_hard_message_sptr self, int which) -> float
        pc_input_buffers_full_avg(soft_to_hard_message_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.soft_to_hard_message_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(soft_to_hard_message_sptr self, int which) -> float
        pc_input_buffers_full_var(soft_to_hard_message_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.soft_to_hard_message_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(soft_to_hard_message_sptr self, int which) -> float
        pc_output_buffers_full(soft_to_hard_message_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.soft_to_hard_message_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(soft_to_hard_message_sptr self, int which) -> float
        pc_output_buffers_full_avg(soft_to_hard_message_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.soft_to_hard_message_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(soft_to_hard_message_sptr self, int which) -> float
        pc_output_buffers_full_var(soft_to_hard_message_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.soft_to_hard_message_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(soft_to_hard_message_sptr self) -> float"""
        return _ccsds_swig.soft_to_hard_message_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(soft_to_hard_message_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.soft_to_hard_message_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(soft_to_hard_message_sptr self)"""
        return _ccsds_swig.soft_to_hard_message_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(soft_to_hard_message_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.soft_to_hard_message_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(soft_to_hard_message_sptr self) -> int"""
        return _ccsds_swig.soft_to_hard_message_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(soft_to_hard_message_sptr self) -> int"""
        return _ccsds_swig.soft_to_hard_message_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(soft_to_hard_message_sptr self, int priority) -> int"""
        return _ccsds_swig.soft_to_hard_message_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(soft_to_hard_message_sptr self) -> std::string"""
        return _ccsds_swig.soft_to_hard_message_sptr_name(self)


    def symbol_name(self):
        """symbol_name(soft_to_hard_message_sptr self) -> std::string"""
        return _ccsds_swig.soft_to_hard_message_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(soft_to_hard_message_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.soft_to_hard_message_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(soft_to_hard_message_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.soft_to_hard_message_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(soft_to_hard_message_sptr self) -> long"""
        return _ccsds_swig.soft_to_hard_message_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(soft_to_hard_message_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.soft_to_hard_message_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(soft_to_hard_message_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.soft_to_hard_message_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(soft_to_hard_message_sptr self) -> std::string"""
        return _ccsds_swig.soft_to_hard_message_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(soft_to_hard_message_sptr self, std::string name)"""
        return _ccsds_swig.soft_to_hard_message_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(soft_to_hard_message_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.soft_to_hard_message_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(soft_to_hard_message_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.soft_to_hard_message_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(soft_to_hard_message_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.soft_to_hard_message_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(soft_to_hard_message_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.soft_to_hard_message_sptr_message_subscribers(self, which_port)

soft_to_hard_message_sptr_swigregister = _ccsds_swig.soft_to_hard_message_sptr_swigregister
soft_to_hard_message_sptr_swigregister(soft_to_hard_message_sptr)


soft_to_hard_message_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
soft_to_hard_message = soft_to_hard_message.make;

class send_nanolink(object):
    """Proxy of C++ gr::ccsds::send_nanolink class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(url):
        """make(std::string url) -> send_nanolink_sptr"""
        return _ccsds_swig.send_nanolink_make(url)

    make = staticmethod(make)
    __swig_destroy__ = _ccsds_swig.delete_send_nanolink
    __del__ = lambda self: None
send_nanolink_swigregister = _ccsds_swig.send_nanolink_swigregister
send_nanolink_swigregister(send_nanolink)

def send_nanolink_make(url):
    """send_nanolink_make(std::string url) -> send_nanolink_sptr"""
    return _ccsds_swig.send_nanolink_make(url)

class send_nanolink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ccsds::send_nanolink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ccsds::send_nanolink)> self) -> send_nanolink_sptr
        __init__(boost::shared_ptr<(gr::ccsds::send_nanolink)> self, send_nanolink p) -> send_nanolink_sptr
        """
        this = _ccsds_swig.new_send_nanolink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(send_nanolink_sptr self) -> send_nanolink"""
        return _ccsds_swig.send_nanolink_sptr___deref__(self)

    __swig_destroy__ = _ccsds_swig.delete_send_nanolink_sptr
    __del__ = lambda self: None

    def make(self, url):
        """make(send_nanolink_sptr self, std::string url) -> send_nanolink_sptr"""
        return _ccsds_swig.send_nanolink_sptr_make(self, url)


    def history(self):
        """history(send_nanolink_sptr self) -> unsigned int"""
        return _ccsds_swig.send_nanolink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(send_nanolink_sptr self, int which, int delay)
        declare_sample_delay(send_nanolink_sptr self, unsigned int delay)
        """
        return _ccsds_swig.send_nanolink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(send_nanolink_sptr self, int which) -> unsigned int"""
        return _ccsds_swig.send_nanolink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(send_nanolink_sptr self) -> int"""
        return _ccsds_swig.send_nanolink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(send_nanolink_sptr self) -> double"""
        return _ccsds_swig.send_nanolink_sptr_relative_rate(self)


    def start(self):
        """start(send_nanolink_sptr self) -> bool"""
        return _ccsds_swig.send_nanolink_sptr_start(self)


    def stop(self):
        """stop(send_nanolink_sptr self) -> bool"""
        return _ccsds_swig.send_nanolink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(send_nanolink_sptr self, unsigned int which_input) -> uint64_t"""
        return _ccsds_swig.send_nanolink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(send_nanolink_sptr self, unsigned int which_output) -> uint64_t"""
        return _ccsds_swig.send_nanolink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(send_nanolink_sptr self) -> int"""
        return _ccsds_swig.send_nanolink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(send_nanolink_sptr self, int m)"""
        return _ccsds_swig.send_nanolink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(send_nanolink_sptr self)"""
        return _ccsds_swig.send_nanolink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(send_nanolink_sptr self) -> bool"""
        return _ccsds_swig.send_nanolink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(send_nanolink_sptr self, int m)"""
        return _ccsds_swig.send_nanolink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(send_nanolink_sptr self) -> int"""
        return _ccsds_swig.send_nanolink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(send_nanolink_sptr self, int i) -> long"""
        return _ccsds_swig.send_nanolink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(send_nanolink_sptr self, long max_output_buffer)
        set_max_output_buffer(send_nanolink_sptr self, int port, long max_output_buffer)
        """
        return _ccsds_swig.send_nanolink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(send_nanolink_sptr self, int i) -> long"""
        return _ccsds_swig.send_nanolink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(send_nanolink_sptr self, long min_output_buffer)
        set_min_output_buffer(send_nanolink_sptr self, int port, long min_output_buffer)
        """
        return _ccsds_swig.send_nanolink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(send_nanolink_sptr self, int which) -> float
        pc_input_buffers_full(send_nanolink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.send_nanolink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(send_nanolink_sptr self, int which) -> float
        pc_input_buffers_full_avg(send_nanolink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.send_nanolink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(send_nanolink_sptr self, int which) -> float
        pc_input_buffers_full_var(send_nanolink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.send_nanolink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(send_nanolink_sptr self, int which) -> float
        pc_output_buffers_full(send_nanolink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.send_nanolink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(send_nanolink_sptr self, int which) -> float
        pc_output_buffers_full_avg(send_nanolink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.send_nanolink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(send_nanolink_sptr self, int which) -> float
        pc_output_buffers_full_var(send_nanolink_sptr self) -> pmt_vector_float
        """
        return _ccsds_swig.send_nanolink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(send_nanolink_sptr self) -> float"""
        return _ccsds_swig.send_nanolink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(send_nanolink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ccsds_swig.send_nanolink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(send_nanolink_sptr self)"""
        return _ccsds_swig.send_nanolink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(send_nanolink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ccsds_swig.send_nanolink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(send_nanolink_sptr self) -> int"""
        return _ccsds_swig.send_nanolink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(send_nanolink_sptr self) -> int"""
        return _ccsds_swig.send_nanolink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(send_nanolink_sptr self, int priority) -> int"""
        return _ccsds_swig.send_nanolink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(send_nanolink_sptr self) -> std::string"""
        return _ccsds_swig.send_nanolink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(send_nanolink_sptr self) -> std::string"""
        return _ccsds_swig.send_nanolink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(send_nanolink_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.send_nanolink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(send_nanolink_sptr self) -> io_signature_sptr"""
        return _ccsds_swig.send_nanolink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(send_nanolink_sptr self) -> long"""
        return _ccsds_swig.send_nanolink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(send_nanolink_sptr self) -> basic_block_sptr"""
        return _ccsds_swig.send_nanolink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(send_nanolink_sptr self, int ninputs, int noutputs) -> bool"""
        return _ccsds_swig.send_nanolink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(send_nanolink_sptr self) -> std::string"""
        return _ccsds_swig.send_nanolink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(send_nanolink_sptr self, std::string name)"""
        return _ccsds_swig.send_nanolink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(send_nanolink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ccsds_swig.send_nanolink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(send_nanolink_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.send_nanolink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(send_nanolink_sptr self) -> swig_int_ptr"""
        return _ccsds_swig.send_nanolink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(send_nanolink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ccsds_swig.send_nanolink_sptr_message_subscribers(self, which_port)

send_nanolink_sptr_swigregister = _ccsds_swig.send_nanolink_sptr_swigregister
send_nanolink_sptr_swigregister(send_nanolink_sptr)


send_nanolink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
send_nanolink = send_nanolink.make;



